// java

import java.util.*;

class Node{
    int data;
    Node next;
    
    Node(int d1,Node nxt){
        this.data=d1;
        this.next=nxt;
    }
    
    Node(int d1){
        this.data=d1;
        this.next=null;
    }
}

class Main{
    
    public static Node convertArray(int[] arr){
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1; i<arr.length; i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
    
    public static int searchElement(Node head,int el){
        int index=1;
        Node temp=head;
        while(temp!=null){
            if(temp.data==el) return index;
            index++;
            temp=temp.next;
        }
        return -1;
    }

    public static void main(String[] args){
        int[] arr={1,2,3,4,5,4,3,2,1};
        Node head=convertArray(arr);
        int position=searchElement(head,3);
        System.out.println(position);
    }
}

----------------------------------------------------------------------------------------------------------------------------------

c++
// Search Element in the Linked List

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
        Node(int d,Node* n){
            data=d;
            next=n;
        }
        
        Node(int d){
            data=d;
            next=nullptr;
        }

};

Node* convertArray(vector<int>&v){
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

bool searchElement(Node* head,int target){            // function to check weather the element is in the list or not
    bool check=false;
    Node* temp=head;
    while(temp){
        if(temp->data==target){
            check=true;
            break;
        }
        temp=temp->next;
    }
    return check;
}


int main(){
    vector<int>v={3,4,5,2,1};
    Node* head=convertArray(v);
    
    int target=5;
    cout<<boolalpha<<searchElement(head,target)<<endl;
    return 0;
}
