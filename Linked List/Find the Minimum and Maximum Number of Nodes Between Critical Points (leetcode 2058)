// java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        if(head==null || head.next==null || head.next.next==null){
            return new int[]{-1,-1};
        }

        ListNode prev=head;
        ListNode current=head.next;
        int firstCritical=-1;
        int lastCritical=-1;
        int index=2;
        int minDistance=Integer.MAX_VALUE;
        while(current.next!=null){
            ListNode front=current.next;
            if(current.val>prev.val && current.val>front.val || current.val<prev.val && current.val<front.val){
                if(firstCritical==-1){
                    firstCritical=index;
                }
                else{
                    minDistance=Math.min(minDistance,index-lastCritical);
                }
                lastCritical=index;
            }
            prev=current;
            current=front;
            index++;
        }

        if(firstCritical==lastCritical) return new int[] {-1,-1};

        int maxDistance=lastCritical-firstCritical;
        return new int[]{minDistance,maxDistance};
    }
}
