// Java code to find the length of the linked list


import java.util.*;

class Node{
    int data;
    Node next;
    
    Node(int d1,Node nxt){
        this.data=d1;
        this.next=nxt;
    }
    
    Node(int d1){
        this.data=d1;
        this.next=null;
    }
}

class Main{
    
    public static Node convertArray(int[] arr){
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1; i<arr.length; i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
    
    public static int length(Node head){
        int count=0;
        Node temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        return count;
    }

    public static void main(String[] args){
        int[] arr={1,2,3,4,5,4,3,2,1};
        Node head=convertArray(arr);
        int count=length(head);
        System.out.println(count);
    }
}


-----------------------------------------------------------------------------------------------------------------------------------


// Find the length of the Linked List

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
        Node(int d,Node* n){
            data=d;
            next=n;
        }
        
        Node(int d){
            data=d;
            next=nullptr;
        }

};

Node* convertArray(vector<int>&v){      
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

int countLength(Node* head){            // function to count the length of the linked list
    int count=0;
    Node* temp=head;
    while(temp){
        count++;
        temp=temp->next;
    }
    return count;
}


int main(){
    vector<int>v={3,4,3,2,1};
    Node* head=convertArray(v);
    int length=countLength(head);
    cout<<length<<endl;
    return 0;
}
