// sort linked list  { merge sort }

#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
        Node(int d,Node* n){
            data=d;
            next=n;
        }
        
        Node(int d){
            data=d;
            next=nullptr;
        }

};

Node* convertArray(vector<int>&v){      // convert vector into linked list.
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

Node* findMid(Node* head){      // function to find the mid.
    Node* slow=head;
    Node* fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

Node* merge(Node* leftHead,Node* rightHead){        // function to merge the linked lists
    Node* left=leftHead;
    Node* right=rightHead;
    Node* dummy=new Node(-1);   // creating the dummy node.
    Node* dn=dummy;
    
    while(left!=NULL && right!=NULL){
        if(left->data<right->data){
            dn->next=left;
            dn=left;
            left=left->next;
        }
        else{
            dn->next=right;
            dn=right;
            right=right->next;
        }
    }
    
    if(left) dn->next=left;
    else dn->next=right;
    
    return dummy->next;
}

Node* sortLL(Node* head){
    if(head==NULL || head->next==NULL) return head;
    
    Node* mid=findMid(head);
    
    Node* leftHead=head;
    Node* rightHead=mid->next;
    mid->next=NULL;
    
    leftHead=sortLL(leftHead);          // recursive calling for spliting nodes
    rightHead=sortLL(rightHead);
    
    return merge(leftHead,rightHead);   // merge both of the lists.
}

void printLL(Node* head){               // function to print the Linked List
    Node* temp=head;
    while(temp){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}

int main(){
    vector<int>v={1,3,4,2,5};
    Node* head=convertArray(v);
    
    head=sortLL(head);
    printLL(head);
    return 0;
}
