// java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode findMid(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public ListNode reverse(ListNode node){
        ListNode curr=node;
        ListNode prev=null;
        while(curr!=null){
            ListNode front=curr.next;
            curr.next=prev;
            prev=curr;
            curr=front;
        }
        return prev;
    }

    public void reorderList(ListNode head) {
        ListNode t1=head;
        ListNode mid=findMid(head);
        ListNode t2=reverse(mid.next);
        mid.next=null;

        while(t1!=null && t2!=null){
            ListNode frontT1=t1.next;
            t1.next=t2;
            t1=frontT1;
            ListNode frontT2=t2.next;
            t2.next=t1;
            t2=frontT2;
        }
        
    }
}
