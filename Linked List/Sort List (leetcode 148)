// Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode findMiddle(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public ListNode merge(ListNode lefthead,ListNode righthead){
        ListNode dummyNode=new ListNode(-1);
        ListNode dn=dummyNode;
        ListNode t1=lefthead;
        ListNode t2=righthead;
        while(t1!=null && t2!=null){
            if(t1.val<t2.val){
                dn.next=t1;
                dn=t1;
                t1=t1.next;
            }
            else{
                dn.next=t2;
                dn=t2;
                t2=t2.next;
            }
        }

        if(t1!=null) dn.next=t1;
        else dn.next=t2;

        return dummyNode.next;
    }

    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null) return head;

        ListNode middle=findMiddle(head);
        ListNode lefthead=head;
        ListNode righthead=middle.next;
        middle.next=null;

        lefthead=sortList(lefthead);
        righthead=sortList(righthead);
        return merge(lefthead,righthead);

    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------

// c++

// sort linked list  { merge sort }

#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
        Node(int d,Node* n){
            data=d;
            next=n;
        }
        
        Node(int d){
            data=d;
            next=nullptr;
        }

};

Node* convertArray(vector<int>&v){      // convert vector into linked list.
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

Node* findMid(Node* head){      // function to find the mid.
    Node* slow=head;
    Node* fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

Node* merge(Node* leftHead,Node* rightHead){        // function to merge the linked lists
    Node* left=leftHead;
    Node* right=rightHead;
    Node* dummy=new Node(-1);   // creating the dummy node.
    Node* dn=dummy;
    
    while(left!=NULL && right!=NULL){
        if(left->data<right->data){
            dn->next=left;
            dn=left;
            left=left->next;
        }
        else{
            dn->next=right;
            dn=right;
            right=right->next;
        }
    }
    
    if(left) dn->next=left;
    else dn->next=right;
    
    return dummy->next;
}

Node* sortLL(Node* head){
    if(head==NULL || head->next==NULL) return head;
    
    Node* mid=findMid(head);
    
    Node* leftHead=head;
    Node* rightHead=mid->next;
    mid->next=NULL;
    
    leftHead=sortLL(leftHead);          // recursive calling for spliting nodes
    rightHead=sortLL(rightHead);
    
    return merge(leftHead,rightHead);   // merge both of the lists.
}

void printLL(Node* head){               // function to print the Linked List
    Node* temp=head;
    while(temp){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}

int main(){
    vector<int>v={1,3,4,2,5};
    Node* head=convertArray(v);
    
    head=sortLL(head);
    printLL(head);
    return 0;
}
