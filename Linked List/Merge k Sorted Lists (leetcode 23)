// java

// Brute Force

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode merge(ListNode l1,ListNode l2){
        ListNode dummy=new ListNode(-1);
        ListNode dn=dummy;
        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                dn.next=l1;
                dn=dn.next;
                l1=l1.next;
            }
            else{
                dn.next=l2;
                dn=dn.next;
                l2=l2.next;
            }
        }

        while(l1!=null){
            dn.next=l1;
            dn=dn.next;
            l1=l1.next;
        }

        while(l2!=null){
            dn.next=l2;
            dn=dn.next;
            l2=l2.next;
        }
        return dummy.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0) return null;
        ListNode result=null;
        for(int i=0; i<lists.length; i++){
            result=merge(result,lists[i]);
        }
        return result;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> PriorityQueue (Min-Heap)
// Tc : O(N log N)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> pq=new PriorityQueue<>();

        for(ListNode node:lists){
            while(node!=null){
                pq.add(node.val);
                node=node.next;
            }
        }

        ListNode dummy=new ListNode(Integer.MIN_VALUE);
        ListNode curr=dummy;
        while(!pq.isEmpty()){
            curr.next=new ListNode(pq.poll());
            curr=curr.next;
        }

        return dummy.next;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Tc : O(N log K)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0) return null;
        PriorityQueue<ListNode> pq=new PriorityQueue<>((a,b) -> a.val-b.val);

        for(ListNode node:lists){
            if(node!=null) pq.add(node);
        }

        ListNode dummy=new ListNode(-1);
        ListNode curr=dummy;
        while(!pq.isEmpty()){
            ListNode minNode=pq.poll();
            curr.next=minNode;
            curr=curr.next;
            if(minNode.next!=null) pq.add(minNode.next);
        }

        return dummy.next;
    }
}
