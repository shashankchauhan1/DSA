// java

class Node {
    int data;
    Node next;
    Node back;

    public Node(int data) {
        this.data = data;
        this.next = null;
        this.back = null;
    }
    
    public Node(int data,Node nptr,Node bptr){
        this.data=data;
        this.next=nptr;
        this.back=bptr;
    }
}

public class Main {
    
    public static Node convertArray(int[] arr){
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1; i<arr.length; i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            temp.back=mover;
            mover=temp;
        }
        return head;
    }
    
    public static void printList(Node head){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }

    public static void main(String[] args) {
        int[] arr={100, 90, 80, 70, 60};
        Node head=convertArray(arr);
        printList(head); 
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------

// Convert array into Doubly Linked List  ( cpp )

#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        Node* back;
        
        Node(int d,Node* n,Node* b){
            data=d;
            next=n;
            back=b;
        }
        
        Node(int d){
            data=d;
            next=nullptr;
            back=nullptr;
        }
};

Node* convertArray(vector<int>&v){
    Node* head=new Node(v[0]);
    Node* prev=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        temp->back=prev;
        prev->next=temp;
        prev=temp;
    }
    return head;
}

void printDLL(Node* head){
    Node* temp=head;
    while(temp){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    
}

int main(){
    vector<int>v={1,2,3,4};
    Node* head=convertArray(v);
    printDLL(head);
    return 0;
}
