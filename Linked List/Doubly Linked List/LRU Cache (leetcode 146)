// java

class Node{
    int key;
    int value;
    Node next;
    Node prev;

    Node(int k,int v){
        this.key=k;
        this.value=v;
    }
}

class LRUCache {
    Node head=new Node(0,0);
    Node tail=new Node(0,0);
    int size;
    Map<Integer,Node> map=new HashMap<>();
    
    public LRUCache(int capacity) {
        head.next=tail;
        tail.prev=head;
        this.size=capacity;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node=map.get(key);
        deleteNode(node);
        insertNode(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            deleteNode(map.get(key));
        }
        else if(size==map.size()){
            deleteNode(tail.prev);
        }
        insertNode(new Node(key,value));
    }

    public void deleteNode(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }

    public void insertNode(Node node){
        map.put(node.key,node);
        node.next=head.next;
        node.next.prev=node;
        head.next=node;
        node.prev=head;
    }

}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
