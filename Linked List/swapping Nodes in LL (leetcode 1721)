// java


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int length(ListNode head){
        int count=0;
        ListNode temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        return count;
    }

    public ListNode swapNodes(ListNode head, int k) {
        int n=length(head);
        int[] arr=new int[n];
        ListNode temp=head;
        int i=0;
        while(temp!=null){
            arr[i++]=temp.val;
            temp=temp.next;
        }
        int tep=arr[k-1];
        arr[k-1]=arr[n-k];
        arr[n-k]=tep;
        temp=head;
        i=0;
        while(temp!=null){
            temp.val=arr[i++];
            temp=temp.next;
        }
        return head;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------

// c++


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* swapNodes(ListNode* head, int k) {
        if(head==NULL) return NULL;
        ListNode* temp=head;
        vector<int>v;
        while(temp!=NULL){
            v.push_back(temp->val);
            temp=temp->next;
        }
        swap(v[k-1],v[v.size()-k]);
        temp=head;
        int i=0;
        while(temp){
            temp->val=v[i];
            i++;
            temp=temp->next;
        }

        return head;
    }
};
