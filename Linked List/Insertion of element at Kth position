// java

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    Node head;
}


public class Main {
    public static Node insertAtIndex(Node head, int index, int data) {
        int idx=0;
        Node addon=new Node(data);
        Node temp=head;
        while(temp!=null){
            if(idx==index-1){
                addon.next=temp.next;
                temp.next=addon;
                break;
            }
            temp=temp.next;
            idx++;
        }
        return head;
    }
    
    public static Node convertArray(int[] arr){
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1; i<arr.length; i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
    
    public static void printList(Node head){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }

    public static void main(String[] args) {
        int[] arr={30,20,10};
        Node head=convertArray(arr);
        head = insertAtIndex(head, 1, 25);
        printList(head); 
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------

// cpp

#include<iostream>
#include<vector>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
        Node(int d,Node* n){
            data=d;
            next=n;
        }
        
        Node(int d){
            data=d;
            next=NULL;
        }
};

Node* convertArray(vector<int>&v){
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

void printLL(Node* head){
    Node* temp=head;
    while(temp){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

int countLength(Node* head){
    int count=0;
    Node* temp=head;
    while(temp){
        count++;
        temp=temp->next;
    }
    return count;
}

Node* insertKposition(Node* head,int el,int pos){
    if(head==NULL && pos==1){
        return new Node(el);
    }
    
    if(pos==1){                     // Head case
        Node* oldhead=head;
        head=new Node(el);
        head->next=oldhead;
        return head;
    }
    
    int length=countLength(head);
    if(pos>length+1){
        cout<<"position doesn't exist"<<endl;
        return head;
    }
    
    Node* temp=head;
    int count=1;
    while(temp){
        count++;
        if(count==pos){
            Node* element=new Node(el);
            element->next=temp->next;
            temp->next=element;
        }
        temp=temp->next;
    }
    return head;
}

int main(){
    vector<int>v={1,2,3};
    Node* head=convertArray(v);
    printLL(head);
    
    int el=5, pos=2;
    
    head=insertKposition(head,el,pos);
    printLL(head);
    
    return 0;
}
