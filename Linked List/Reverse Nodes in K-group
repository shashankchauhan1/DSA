
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* findKthNode(ListNode* temp,int k){
        int counter=1;
        while(temp!=NULL && counter<k){
            counter++;
            temp=temp->next;
        }
        return temp;
    }

    ListNode* reverse(ListNode* temp){
        ListNode* current=temp;
        ListNode* prev=NULL;
        while(current!=NULL){
            ListNode* front=current->next;
            current->next=prev;
            prev=current;
            current=front;
        }
        return prev;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL || head->next==NULL) return head;

        ListNode* temp=head;
        ListNode* prev=NULL;

        while(temp!=NULL){
            ListNode* KthNode=findKthNode(temp,k);

            if(KthNode==NULL){
                if(prev) prev->next=temp;
                break;
            }

            ListNode* nextNode=KthNode->next;
            KthNode->next=NULL;

            reverse(temp);

            if(temp==head){
                head=KthNode;
            }
            else{
                prev->next=KthNode;
            }
            prev=temp;
            temp=nextNode;

        }
        return head;
    }
};
