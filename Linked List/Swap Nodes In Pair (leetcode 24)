// java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode current=head;
        ListNode prev=null;
        ListNode front=null;
        while(current!=null && current.next!=null){
            front=current.next;
            current.next=front.next;
            front.next=current;
            if(prev!=null){
                prev.next=front;
            }
            else{
                head=front;
            }
            prev=current;
            current=current.next;
        }
        return head;
    }
}



------------------------------------------------------------------------------------------------------------------------------------------------------


// c++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// class Solution {
// public:
//     ListNode* swapPairs(ListNode* head) {
//         if(head==NULL || head->next==NULL) return head;
//         ListNode* current=head;
//         ListNode* prev=NULL;
//         while(current!=NULL && current->next!=NULL){
//             ListNode* temp=current->next;
//             current->next=temp->next;
//             temp->next=current;

//             if(prev){
//                 prev->next=temp;
//             }
//             else{
//                 head=temp;
//             }
//             prev=current;
//             current=current->next;
//         }
//         return head;
//     }
// };


class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;

        ListNode* current=head;
        ListNode* prev=NULL;
        ListNode* front=NULL;
        while(current!=NULL && current->next!=NULL){
            front=current->next;
            current->next=current->next->next;
            front->next=current;
            if(prev){
                prev->next=front;
            }
            else{
                head=front;
            }
            prev=current;
            current=current->next;
            
        }
        return head;
    }
};
