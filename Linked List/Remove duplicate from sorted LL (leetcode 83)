// java

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummyNode=new ListNode(-9999);
        ListNode dn=dummyNode;
        ListNode temp=head;
        while(temp!=null){
            if(temp.val!=dn.val){
                dn.next=temp;
                dn=temp;
                temp=temp.next;
                dn.next=null;
            }
            else{
                temp=temp.next;
            }
        }
        return dummyNode.next;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------

// cpp

#include<bits/stdc++.h>
using namespace std;

class ListNode {
public:
    int data;
    ListNode* next;

    ListNode(int d, ListNode* n) {
        data = d;
        next = n;
    }

    ListNode(int d) {
        data = d;
        next = nullptr;
    }
};

ListNode* deleteDuplicates(ListNode* head) {
    if (head == NULL || head->next == NULL) return head;

    ListNode* dummy = new ListNode(-9999); 
    ListNode* dn = dummy; 
    ListNode* temp = head; 

    while (temp != NULL) {
        if (dn->data != temp->data) {
            dn->next = temp; 
            dn = temp; 
            temp = temp->next;
            dn->next = NULL; 
        } else {
            temp = temp->next;
        }
    }

    ListNode* result = dummy->next; 
    delete dummy;
    return result;
}

ListNode* convertArray(const vector<int>& v) {
    ListNode* head = new ListNode(v[0]);
    ListNode* mover = head;
    for (int i = 1; i < v.size(); i++) {
        ListNode* temp = new ListNode(v[i]);
        mover->next = temp;
        mover = temp;
    }
    return head; 
}

void printLL(ListNode* head) {
    ListNode* temp = head;
    while (temp) {
        cout << temp->data << " "; 
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    vector<int> v = {1, 2, 2, 3, 3, 4};
    ListNode* head = convertArray(v);
    
    head = deleteDuplicates(head);
    printLL(head);
    return 0;
}
