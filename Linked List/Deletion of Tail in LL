// java (deletion of tail in LL)

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
    
    public Node(int data,Node ptr){
        this.data=data;
        this.next=ptr;
    }
}

public class Main {
    public static Node deleteTail(Node head) {
        if(head==null || head.next==null) return null;
        Node temp=head;
        while(temp.next.next!=null){
            temp=temp.next;
        }
        temp.next=null;
        return head;
    }
    
    public static Node convertArray(int[] arr){
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1; i<arr.length; i++){
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
    
    public static void printList(Node head){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }

    public static void main(String[] args) {
        int[] arr={100, 90, 80, 70, 60};
        Node head=convertArray(arr);
        head = deleteTail(head);
        printList(head); 
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

// Deletion of Tail in LL  (cpp)

#include<iostream>
#include<vector>
using namespace std;

class Node{
    public:
        int data;
        Node* next;
        
    Node(int d,Node* n){
        data=d;
        next=n;
    }
    Node(int d){
        data=d;
        next=nullptr;
    }
};

Node* convertArray(vector<int>&v){            // converting array into linked list
    Node* head=new Node(v[0]);
    Node* mover=head;
    for(int i=1; i<v.size(); i++){
        Node* temp=new Node(v[i]);
        mover->next=temp;
        mover=temp;
    }
    return head;
}

void printLL(Node* head){              // function to print the LL
    Node* temp=head;
    while(temp){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}

Node* deleteTail(Node* head){                                      // function to delete the tail
    if(head==NULL || head->next==NULL) return NULL;
    
    Node* temp=head;
    while(temp->next->next!=NULL){
        temp=temp->next;
    }
    delete temp->next;
    temp->next=nullptr;
    
    return head;
}

int main(){
    vector<int>v={1,2,3,4,5};
    Node* head=convertArray(v);      // converting array into  LL
    printLL(head);                  // printing the LL before deletion
    cout<<endl;
    head=deleteTail(head);          // deletion of tail
    printLL(head);                  // printing the LL after deletion
    return 0;
}
