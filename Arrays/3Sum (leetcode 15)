// Java


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
        int n=nums.length;
        Arrays.sort(nums);
        for(int i=0; i<n; i++){
            if(i!=0 && nums[i]==nums[i-1]) continue;
            int s=i+1;
            int e=n-1;
            while(s<e){
                int sum=nums[i]+nums[s]+nums[e];
                if(sum==0){
                    result.add(Arrays.asList(nums[i],nums[s],nums[e]));
                    while(s<e && nums[s]==nums[s+1]) s++;
                    while(s<e && nums[e]==nums[e-1]) e--;
                    s++;
                    e--;
                }
                else if(sum>0){
                    e--;
                }
                else{
                    s++;
                }
            }
        }
        return result;
    }
}


----------------------------------------------------------------------------------

// cpp

#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;

void threeSum(int n,vector<int>&nums){
    set<vector<int>> result;
    vector<vector<int>> ans;
    sort(nums.begin(),nums.end());
    
    for(int i=0; i<n; i++){
        if(i>0 && nums[i]==nums[i-1]) continue;
        int j=i+1;
        int k=n-1;
        while(j<k){
            int sum=nums[i]+nums[j]+nums[k];
            if(sum==0){
                result.insert({nums[i],nums[j],nums[k]});
                while(j<k && nums[j]==nums[j+1]) j++;
                while(j<k && nums[k]==nums[k-1]) k--;
                j++;
                k--;
            }
            else if(sum>0){
                k--;
            }
            else if(sum<0){
                j++;
            }
        }
    }
    for(auto it:result){
        ans.push_back(it);
    }
    for(auto triplet : ans){
        for(int num:triplet){
            cout<<num<<" ";
        }
        cout<<endl;
    }
}

int main(){
    int n;
    cin>>n;
    vector<int>nums(n);
    for(int i=0; i<n; i++){
        cin>>nums[i];
    }
    threeSum(n,nums);
    return 0;
}
