// java

// For-loop

class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        // check row;
        for(int i=0; i<9; i++){
            Set<Character> set=new HashSet<>();
            for(int j=0; j<9; j++){
                if(board[i][j]=='.') continue;
                if(set.contains(board[i][j])) return false;
                set.add(board[i][j]);
            }
        }

        // check column;
        for(int i=0; i<9; i++){
            Set<Character> set=new HashSet<>();
            for(int j=0; j<9; j++){
                if(board[j][i]=='.') continue;
                if(set.contains(board[j][i])) return false;
                set.add(board[j][i]);
            }
        }

        // check 3x3 block;

        for(int i=0; i<9; i+=3){
            for(int j=0; j<9; j+=3){
                Set<Character> set=new HashSet<>();
                for(int k=i; k<i+3; k++){
                    for(int l=j; l<j+3; l++){
                        if(board[k][l]=='.') continue;

                        if(set.contains(board[k][l])){
                            return false;
                        }
                        set.add(board[k][l]);
                    }
                }
            }
        }

        return true;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Recursive solution

class Solution {
    public boolean isSafe(int r,int c,char[][] board,char ch){
        // check horizontally
        for(int j=0; j<9; j++){
            if(board[r][j]==ch && c!=j) return false;
        }

        // check vertically
        for(int i=0; i<9; i++){
            if(board[i][c]==ch && i!=r) return false;
        }
        
        int sr=(r/3)*3;
        int sc=(c/3)*3;
        for(int i=sr; i<sr+3; i++){
            for(int j=sc; j<sc+3; j++){
                if(board[i][j]==ch && (i!=r || j!=c)) return false;
            }
        }
        return true;
    }

    public boolean isValidSudoku(char[][] board) {
        int n=board.length;
        int m=board[0].length;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j]!='.'){
                    if(isSafe(i,j,board,board[i][j])==false) return false;
                }
            }
        }
        return true;
    }
}
