// cpp

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int>result;
        int r=matrix.size();
        int c=matrix[0].size();

        int top=0;
        int left=0;
        int bottom=r-1;
        int right=c-1;

        while(top<=bottom && left<=right){
            for(int i=left; i<=right; i++){
                result.push_back(matrix[top][i]);
            }
            top++;

            for(int i=top; i<=bottom; i++){
                result.push_back(matrix[i][right]);
            }
            right--;


            if(top<=bottom){
                for(int i=right; i>=left; i--){
                    result.push_back(matrix[bottom][i]);
                }
                bottom--;
            }
            if(left<=right){
                for(int i=bottom; i>=top; i--){
                    result.push_back(matrix[i][left]);
                }
                left++;
            }

        }
        return result;
    }
};


// Java

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result=new ArrayList<>();
        int n=matrix.length;
        int r=matrix.length;
        int c=matrix[0].length;
        int top=0;
        int left=0;
        int bottom=r-1;
        int right=c-1;
        while(top<=bottom && left<=right){
            for(int i=left; i<=right; i++){
                result.add(matrix[top][i]);
            }
            top++;
            for(int i=top; i<=bottom; i++){
                result.add(matrix[i][right]);
            }
            right--;
            if(top<=bottom){
                for(int i=right; i>=left; i--){
                    result.add(matrix[bottom][i]);
                }
                bottom--;
            }
            if(left<=right){
                for(int i=bottom; i>=top; i--){
                    result.add(matrix[i][left]);
                }
                left++;
            }
        }
        return result;
    }
}
