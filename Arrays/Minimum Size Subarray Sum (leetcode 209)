// Minimum Size Subarray Sum 

1> using the two pointer and sliding window approach.

time complexity : O(n),
space complexity : O(1).


class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int l=0,r=0,n=nums.length,length=Integer.MAX_VALUE,sum=0;

        while(r<n){
            sum+=nums[r];
            while(sum>=target){
                length=Math.min(length,r-l+1);
                sum-=nums[l];
                l++;
            }
            r++;
        }
        return length==Integer.MAX_VALUE ? 0 : length;
    }
}
