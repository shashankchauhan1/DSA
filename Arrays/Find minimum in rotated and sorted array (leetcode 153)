// java

1> took a variable to store the minimum value.
2> if the start is less than or equals to mid then it means the start is the smallest so store it and check in the second half.
3> if mid is lesser so it means the mid should be the minimum so compare and change the ans.

class Solution {
    public int findMin(int[] nums) {
        int min=Integer.MAX_VALUE;
        int s=0;
        int e=nums.length-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[s]<=nums[mid]){
                min=Math.min(min,nums[s]);
                s=mid+1;
            }
            else{
                min=Math.min(min,nums[mid]);
                e=mid-1;
            }
        }
        return min;
    }
}
