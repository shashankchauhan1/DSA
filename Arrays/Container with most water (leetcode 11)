// in Java


class Solution {
    public int maxArea(int[] height) {
        int i=0;
        int j=height.length-1;
        int max_value=0;
        while(i<j){
            int width=j-i;
            int h=Math.min(height[i],height[j]);
            int area=width*h;
            max_value=Math.max(area,max_value);
            if(height[i]<height[j]){
                i++;
            }
            else j--;
        }
        return max_value;
    }
}


// in c++

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n=height.size();
        int lptr=0;
        int rptr=n-1;
        int max_value=0;
        while(lptr<rptr){
            int width=rptr-lptr;
            int h=min(height[lptr],height[rptr]);
            int area=width*h;
            max_value=max(max_value,area);

            height[lptr]<height[rptr] ? lptr++ : rptr--;
        }
        return max_value;
    }
};
