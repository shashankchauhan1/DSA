// java

class Solution {
    public int findMin(int[] nums){
        int min=Integer.MAX_VALUE;
        int n=nums.length;
        for(int num:nums){
            min=Math.min(min,num);
        }
        return min;
    }

    public int findMax(int[] nums){
        int max=Integer.MIN_VALUE;
        int n=nums.length;
        for(int num:nums){
            max=Math.max(max,num);
        }
        return max;
    }

    public boolean canPick(int[] bloomDay,int current,int noOfBouquets,int flowerNeeded){
        int total=0;
        int cnt=0;
        for(int i=0; i<bloomDay.length; i++){
            if(bloomDay[i]<=current) cnt++;
            else{
                total+=cnt/flowerNeeded;
                cnt=0;
            }
        }
        total+=cnt/flowerNeeded;

        return total>=noOfBouquets;
    }

    public int minDays(int[] bloomDay, int m, int k) {
        int n=bloomDay.length;
        if(n < (long)m*k) return -1;

        int s=findMin(bloomDay);
        int e=findMax(bloomDay);
        int ans=0;

        while(s<=e){
            int mid=s+(e-s)/2;
            if(canPick(bloomDay,mid,m,k)){
                ans=mid;
                e=mid-1;
            }
            else s=mid+1;
        }
        return ans;
    }
}
