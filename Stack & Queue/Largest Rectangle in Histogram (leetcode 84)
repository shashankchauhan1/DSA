// java


class Solution {
    public int[] previousSmallestElement(int[] arr){
        Stack<Integer> st=new Stack<>();
        int[] result=new int[arr.length];
        for(int i=0; i<arr.length; i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()) result[i]=-1;
            else result[i]=st.peek();
            st.push(i);
        }
        return result;
    }
    public int[] nextSmallestElement(int[] arr){
        Stack<Integer> st=new Stack<>();
        int[] result=new int[arr.length];
        for(int i=arr.length-1; i>=0; i--){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()) result[i]=arr.length;
            else result[i]=st.peek();
            st.push(i);
        }
        return result;
    }
    public int largestRectangleArea(int[] heights) {
        int[] pse=previousSmallestElement(heights);
        int[] nse=nextSmallestElement(heights);
        int maxArea=Integer.MIN_VALUE;
        for(int i=0; i<heights.length; i++){
            int width=nse[i]-pse[i]-1;
            int area=width*heights[i];
            maxArea=Math.max(area,maxArea);
        }
        return maxArea;
    }
}
