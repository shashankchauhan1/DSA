// java

// Using Recursion


import java.util.*;

class Main{
    
    public static void reverse(Queue<Integer> q){
        if(q.size()==0) return;
        int el=q.poll();
        reverse(q);
        q.add(el);
    }
    
    public static void printQ(Queue<Integer> q){
        while(!q.isEmpty()){
            System.out.print(q.poll()+" ");
        }
    }
    
    public static void main(String[] args){
        Queue<Integer> q=new LinkedList<>();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=0; i<n; i++){
            q.add(sc.nextInt());
        }
        reverse(q);
        printQ(q);
    }
}



// using Stack


import java.util.*;

class Main{
    
    public static void reverse(Queue<Integer> q){
        Stack<Integer> st=new Stack<>();
        while(!q.isEmpty()){
            st.push(q.poll());
        }
        while(!st.isEmpty()){
            q.add(st.pop());
        }
    }
    
    public static void printQ(Queue<Integer> q){
        while(!q.isEmpty()){
            System.out.print(q.poll()+" ");
        }
    }
    
    public static void main(String[] args){
        Queue<Integer> q=new LinkedList<>();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=0; i<n; i++){
            q.add(sc.nextInt());
        }
        reverse(q);
        printQ(q);
    }
}
