// java

class Solution {

    public int[] previousSmallestElement(int[] arr){
        Stack<Integer> st=new Stack<>();
        int[] result=new int[arr.length];
        for(int i=0; i<arr.length; i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()) result[i]=-1;
            else result[i]=st.peek();
            st.push(i);
        }
        return result;
    }
    
    public int[] nextSmallestElement(int[] arr){
        Stack<Integer> st=new Stack<>();
        int[] result=new int[arr.length];
        for(int i=arr.length-1; i>=0; i--){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()) result[i]=arr.length;
            else result[i]=st.peek();
            st.push(i);
        }
        return result;
    }

    public int maxAreaHistogram(int[] arr){
        int[] pse=previousSmallestElement(arr);
        int[] nse=nextSmallestElement(arr);
        int maxArea=Integer.MIN_VALUE;
        for(int i=0; i<arr.length; i++){
            int width=nse[i]-pse[i]-1;
            int area=width*arr[i];
            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }

    public int maximalRectangle(char[][] matrix) {
        int r=matrix.length;
        int c=matrix[0].length;
        int[][] prefix=new int[r][c];
        for(int j=0; j<c; j++){
            int sum=0;
            for(int i=0; i<r; i++){
                sum+=(matrix[i][j]-'0');
                if(matrix[i][j]=='0') sum=0;
                else prefix[i][j]=sum;
            }
        }
        int maxArea=Integer.MIN_VALUE;
        for(int i=0; i<prefix.length; i++){
            int area=maxAreaHistogram(prefix[i]);
            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }
}
