// java



import java.util.*;

public class Main {
    public static void main(String[] args) {
        String infixExpression = "A+B*C";
        String prefixExpression = convertInfixToPrefix(infixExpression);
        
        System.out.println("Infix Expression: " + infixExpression);
        System.out.println("Prefix Expression: " + prefixExpression);
    }
    
    public static String reverse(String s){
        StringBuilder sb=new StringBuilder(s);
        sb.reverse();
        return sb+"";
    }
    
    public static String toggleBrackets(String s){
        StringBuilder sb=new StringBuilder(s);
        for(int i=0; i<s.length(); i++){
            if(sb.charAt(i)==')'){
                sb.setCharAt(i,'(');
            }
            else if(sb.charAt(i)=='('){
                sb.setCharAt(i,')');
            }
        }
        return sb+"";
    }
    
    public static int priority(char ch){
        if(ch=='^') return 3;
        if(ch=='*' || ch=='/') return 2;
        if(ch=='+' || ch=='-') return 1;
        return -1;
    }
    
    public static String convertInfixToPrefix(String s) {
        s=reverse(s);
        s=toggleBrackets(s);
        
        int i=0;
        Stack<Character> st=new Stack<>();
        StringBuilder ans=new StringBuilder();
        
        while(i<s.length()){
            
            if(Character.isLetterOrDigit(s.charAt(i))){
                ans.append(s.charAt(i));
            }
            else if(s.charAt(i)=='(') st.push(s.charAt(i));
            else if(s.charAt(i)==')'){
                while(!st.isEmpty() && st.peek()!='('){
                    ans.append(st.pop());
                }
                if(!st.isEmpty()) st.pop();
            }
            else{
                if(s.charAt(i)=='^'){
                    while(!st.isEmpty() && priority(s.charAt(i))>=priority(st.peek()) ){
                        ans.append(st.pop());
                    }
                }
                else{
                    while(!st.isEmpty() && priority(s.charAt(i))<priority(st.peek()) ){
                        ans.append(st.pop());
                    }
                }
                st.push(s.charAt(i));
            }
            
            i++;
        }
        
        while(!st.isEmpty()){
            ans.append(st.pop());
        }
        ans.reverse();
        return ans+"";
    }
}


