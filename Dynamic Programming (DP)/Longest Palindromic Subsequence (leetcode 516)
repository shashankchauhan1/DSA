// java


class Solution {
    public int lcs(int i,int j,String s,String t,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s.charAt(i)==t.charAt(j)) return 1+lcs(i-1,j-1,s,t,dp);

        return dp[i][j]=Math.max(lcs(i-1,j,s,t,dp),lcs(i,j-1,s,t,dp));    
    }

    public int longestPalindromeSubseq(String s) {
        int n=s.length();
        StringBuilder sb=new StringBuilder(s);
        String t=sb.reverse().toString();
        int[][] dp=new int[n+1][n+1];
        for(int[] d:dp) Arrays.fill(d,-1);

        return lcs(n-1,n-1,s,t,dp);
    }
}
