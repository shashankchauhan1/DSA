// java

1> Recursion

class Solution {
    public int f(int i,int j,String s,String t){
        if(i<0 || j<0) return 0;

        if(s.charAt(i)==t.charAt(j)) return 1+f(i-1,j-1,s,t);

        return Math.max(f(i-1,j,s,t),f(i,j-1,s,t));
    }

    public int longestPalindromeSubseq(String s) {
        StringBuilder sb=new StringBuilder(s);
        String t=sb.reverse().toString();
        int n=s.length(), m=t.length();
        return f(n-1,m-1,s,t);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int lcs(int i,int j,String s,String t,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s.charAt(i)==t.charAt(j)) return 1+lcs(i-1,j-1,s,t,dp);

        return dp[i][j]=Math.max(lcs(i-1,j,s,t,dp),lcs(i,j-1,s,t,dp));    
    }

    public int longestPalindromeSubseq(String s) {
        int n=s.length();
        StringBuilder sb=new StringBuilder(s);
        String t=sb.reverse().toString();
        int[][] dp=new int[n+1][n+1];
        for(int[] d:dp) Arrays.fill(d,-1);

        return lcs(n-1,n-1,s,t,dp);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int longestPalindromeSubseq(String s) {
        StringBuilder sb=new StringBuilder(s);
        String t=sb.reverse().toString();
        int n=s.length(), m=t.length();
        
        int[][] dp=new int[n+1][m+1];
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
}

