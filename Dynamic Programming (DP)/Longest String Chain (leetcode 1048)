// java

1> Finding the length

class Solution {
    public boolean compare(String s1,String s2){
        if(s1.length()!=s2.length()+1) return false;

        int i=0,j=0;
        while(i<s1.length()){
            if(j<s2.length() && s1.charAt(i)==s2.charAt(j)){
                i++;
                j++;
            }
            else{
                i++;
            }
        }
        return i==s1.length() && j==s2.length();
    }

    public int longestStrChain(String[] words) {
        int n=words.length;
        Arrays.sort(words, (a,b) -> a.length()-b.length());
        
        int[] dp=new int[n];
        Arrays.fill(dp,1);
        int max=Integer.MIN_VALUE;

        for(int i=0; i<n; i++){
            for(int prev=0; prev<=i; prev++){
                if(compare(words[i],words[prev]) && 1+dp[prev] > dp[i] ){
                    dp[i]=1+dp[prev];
                }
                max=Math.max(max,dp[i]);
            }
        }
        return max;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Printing the Strings

import java.util.*;

public class LongestStringChain {
    public static boolean compare(String s1,String s2){
        if(s1.length()!=s2.length()+1) return false;

        int i=0,j=0;
        while(i<s1.length()){
            if(j<s2.length() && s1.charAt(i)==s2.charAt(j)){
                i++;
                j++;
            }
            else{
                i++;
            }
        }
        return i==s1.length() && j==s2.length();
    }

    public static void longestStrChain(String[] words) {
        int n=words.length;
        Arrays.sort(words,(a,b) -> a.length()-b.length());

        int[] dp=new int[n];
        Arrays.fill(dp,1);
        int[] hash=new int[n];

        for(int i=0; i<n; i++){
            hash[i]=i;
            for(int prev=0; prev<i; prev++){
                if(compare(words[i],words[prev]) && 1+dp[prev] > dp[i]){
                    dp[i]=1+dp[prev];
                    hash[i]=prev;
                }
            }
        }

        int el=-1,lastIndex=-1;

        for(int i=0; i<n; i++){
            if(dp[i]>el){
                el=dp[i];
                lastIndex=i;
            }
        }

        ArrayList<String> list=new ArrayList<>();

        list.add(words[lastIndex]);

        while(hash[lastIndex]!=lastIndex){
            lastIndex=hash[lastIndex];
            list.add(words[lastIndex]);
        }
        Collections.reverse(list);

        for(String num:list){
            System.out.print(num+" ");
        }
    }

    public static void main(String[] args) {
        String[] words ={"xbc","pcxbcf","xb","cxbc","pcxbc"};
        int n=words.length;
        longestStrChain(words);
    }
}

