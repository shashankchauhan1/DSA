// java ( code 360 )

// try to write the recurrence, then convert it into memoization then via memoization write the tabulation
// in the dp table the last row contains true for the values that are subset, so we know the totalSum, we get the s1 those are true, then the s2 = totalSum-s1 and 
// find the min from s1-s2.

public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        int sum=0;
        for(int num:arr) sum+=num;
        boolean[][] dp=new boolean[n][sum+1];
        for(int i=0; i<n; i++) dp[i][0]=true;
        if(arr[0]<=sum) dp[0][sum]=true;

        for(int i=1; i<n; i++){
            for(int target=1; target<=sum; target++){
                boolean notpick=dp[i-1][target];
                boolean pick=false;
                if(arr[i]<=target) pick=dp[i-1][target-arr[i]];

                dp[i][target]=pick || notpick;
            }
        }
        
        int mini=Integer.MAX_VALUE;
        for(int i=0; i<=sum; i++){
            if(dp[n-1][i]){
                int s1=i;
                int s2=Math.abs(sum-s1);
                mini=Math.min(mini,Math.abs(s1-s2));
            }
        }
        return mini;
    }
}


