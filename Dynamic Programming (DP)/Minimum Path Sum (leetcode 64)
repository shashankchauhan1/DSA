// java

1> Memoization

class Solution {
    public int f(int i,int j,int[][] grid,int[][] dp){
        if(i==0 && j==0) return grid[0][0];
        if(i<0 || j<0) return (int)1e9;

        if(dp[i][j]!=-1) return dp[i][j];

        int up=grid[i][j]+f(i-1,j,grid,dp);
        int left=grid[i][j]+f(i,j-1,grid,dp);

        return dp[i][j]=Math.min(up,left);
    }

    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        return f(n-1,m-1,grid,dp);
    }
}

class Solution {
    public int f(int i,int j,int[][] grid,int[][] dp){
        if(i==0 && j==0) return grid[0][0];
        if(i<0 || j<0) return (int)1e9;

        if(dp[i][j]!=-1) return dp[i][j];

        int up=grid[i][j]+f(i-1,j,grid,dp);
        int left=grid[i][j]+f(i,j-1,grid,dp);

        return dp[i][j]=Math.min(up,left);
    }

    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        return f(n-1,m-1,grid,dp);
    }
}class Solution {
    public int f(int i,int j,int[][] grid,int[][] dp){
        if(i==0 && j==0) return grid[0][0];
        if(i<0 || j<0) return (int)1e9;

        if(dp[i][j]!=-1) return dp[i][j];

        int up=grid[i][j]+f(i-1,j,grid,dp);
        int left=grid[i][j]+f(i,j-1,grid,dp);

        return dp[i][j]=Math.min(up,left);
    }

    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        return f(n-1,m-1,grid,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Tabulation

class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j==0){
                    dp[i][j]=grid[i][j];
                }
                else{
                    int up=grid[i][j];
                    if(i>0) up+=dp[i-1][j];
                    else up+=(int)(1e8);

                    int left=grid[i][j];
                    if(j>0) left+=dp[i][j-1];
                    else left+=(int)(1e8);

                    dp[i][j]=Math.min(up,left);
                }
            }
        }
        return dp[n-1][m-1];
    }
}
