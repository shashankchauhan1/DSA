// java

1> Recursion

class Solution {
    public boolean isPalindrome(String s,int i,int j){
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }

    public int f(int i,int n,String s){
        if(i>=n) return 0;
        
        int minCost=Integer.MAX_VALUE;
        for(int idx=i; idx<n; idx++){
            if(isPalindrome(s,i,idx)){
                int cost=1+f(idx+1,n,s);
                minCost=Math.min(minCost,cost);
            }
        }
        
        return minCost;
    }

    public int minCut(String s) {
        int n=s.length();
        return f(0,n,s)-1;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization


class Solution {
    public boolean isPalindrome(String s,int i,int j){
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }

    public int f(int i,int n,String s,int[] dp){
        if(i>=n) return 0;
        if(dp[i]!=-1) return dp[i];

        int minCost=Integer.MAX_VALUE;
        for(int idx=i; idx<n; idx++){
            if(isPalindrome(s,i,idx)){
                int cost=1+f(idx+1,n,s,dp);
                minCost=Math.min(minCost,cost);
            }
        }
        
        return dp[i]=minCost;
    }

    public int minCut(String s) {
        int n=s.length();
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        return f(0,n,s,dp)-1;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public boolean isPalindrome(String s,int i,int j){
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
    
    public int minCut(String s) {
        int n=s.length();
        int[] dp=new int[n+1];
        
        for(int i=n-1; i>=0; i--){
            int minCost=Integer.MAX_VALUE;
            for(int j=i; j<n; j++){
                if(isPalindrome(s,i,j)){
                    int cost=1+dp[j+1];
                    minCost=Math.min(cost,minCost);
                }
            }
            dp[i]=minCost;
        }
        return dp[0]-1;
    }
}









