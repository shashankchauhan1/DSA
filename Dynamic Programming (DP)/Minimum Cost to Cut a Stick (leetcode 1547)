// java

1> Recursion

class Solution {
    public int f(int i,int j,ArrayList<Integer> list){
        if(i>j) return 0;

        int mini=Integer.MAX_VALUE;
        for(int idx=i; idx<=j; idx++){
            int cuts=list.get(j+1) - list.get(i-1) + f(i,idx-1,list) + f(idx+1,j,list);
            mini=Math.min(cuts,mini);
        }
        return mini;
    }

    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        ArrayList<Integer> list=new ArrayList<>();
        list.add(0);
        for(int num:cuts) list.add(num);
        list.add(n);

        return f(1,cuts.length,list);
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int j,ArrayList<Integer> list,int[][] dp){
        if(i>j) return 0;

        if(dp[i][j]!=-1) return dp[i][j];

        int mini=Integer.MAX_VALUE;
        for(int idx=i; idx<=j; idx++){
            int cuts=list.get(j+1) - list.get(i-1) + f(i,idx-1,list,dp) + f(idx+1,j,list,dp);
            mini=Math.min(cuts,mini);
        }
        return dp[i][j]=mini;
    }

    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        ArrayList<Integer> list=new ArrayList<>();
        list.add(0);
        for(int num:cuts) list.add(num);
        list.add(n);

        int[][] dp=new int[list.size()+1][list.size()+1];
        for(int[] d:dp) Arrays.fill(d,-1);

        return f(1,cuts.length,list,dp);
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        ArrayList<Integer> list=new ArrayList<>();
        list.add(0);
        for(int num:cuts) list.add(num);
        list.add(n);

        int c=cuts.length;
        
        int[][] dp=new int[list.size()+1][list.size()+1];

        for(int i=c; i>=1; i--){
            for(int j=1; j<=c; j++){
                if(i>j) continue;   // base case
                
                int mini=Integer.MAX_VALUE;
                for(int k=i; k<=j; k++){
                    int cut=list.get(j+1)-list.get(i-1) + dp[i][k-1] + dp[k+1][j];
                    mini=Math.min(cut,mini);
                }
                dp[i][j]=mini;
            }
        }
        return dp[1][cuts.length];
    }
}
