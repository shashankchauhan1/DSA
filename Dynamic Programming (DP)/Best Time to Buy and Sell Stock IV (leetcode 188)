// java

1> Recursive

class Solution {
    public int f(int i,int buy,int k,int n,int[] prices){
        if(k==0) return 0;
        if(i==n) return 0;

        int profit=0;
        if(buy==1){
            int pick= -prices[i]+f(i+1,0,k,n,prices);
            int notpick= 0+f(i+1,1,k,n,prices);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell= prices[i]+f(i+1,1,k-1,n,prices);
            int notsell=0+f(i+1,0,k,n,prices);
            profit=Math.max(sell,notsell);
        }
        return profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        return f(0,1,k,n,prices);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int buy,int k,int n,int[] prices,int[][][] dp){
        if(k==0) return 0;
        if(i==n) return 0;

        if(dp[i][buy][k]!=-1) return dp[i][buy][k];

        int profit=0;
        if(buy==1){
            int pick= -prices[i]+f(i+1,0,k,n,prices,dp);
            int notpick= 0+f(i+1,1,k,n,prices,dp);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell= prices[i]+f(i+1,1,k-1,n,prices,dp);
            int notsell=0+f(i+1,0,k,n,prices,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy][k]=profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n][2][k+1];

        for(int[][] dd:dp){
            for(int[] d:dd){
                Arrays.fill(d,-1);
            }
        }

        return f(0,1,k,n,prices,dp);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n+1][2][k+1];

        // at transaction 0, the index,buy can be anything

        for(int i=0; i<=n; i++){
            for(int buy=0; buy<=1; buy++){
                dp[i][buy][0]=0;
            }
        }

        // at i==n, the buy and cap can be anything

        for(int buy=0; buy<=1; buy++){
            for(int cap=1; cap<=k; cap++){
                dp[n][buy][cap]=0;
            }
        }

        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<=1; buy++){
                for(int cap=1; cap<=k; cap++){
                    int profit=0;

                    if(buy==1){
                        profit=Math.max(-prices[i]+dp[i+1][0][cap],dp[i+1][1][cap]);
                    }
                    else{
                        profit=Math.max(prices[i]+dp[i+1][1][cap-1],dp[i+1][0][cap]);
                    }
                    dp[i][buy][cap]=profit;
                }
            }
        }
        return dp[0][1][k];        // we start with buy=1 and capacity on that time is k
    }
}


