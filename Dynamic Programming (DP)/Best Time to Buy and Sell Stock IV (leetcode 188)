// java


class Solution {
    public int f(int i,int buy,int k,int n,int[] prices,int[][][] dp){
        if(i==n || k==0) return 0;
        if(dp[i][buy][k]!=-1) return dp[i][buy][k];
        int profit=0;
        if(buy==1){
            int take=-prices[i]+f(i+1,0,k,n,prices,dp);
            int nottake=0+f(i+1,1,k,n,prices,dp);
            profit=Math.max(take,nottake);
        }
        else{
            int sell=prices[i]+f(i+1,1,k-1,n,prices,dp);
            int notsell=0+f(i+1,0,k,n,prices,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy][k]=profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n][2][k+1];

        for(int[][] dd:dp){
            for(int[] d:dd){
                Arrays.fill(d,-1);
            }
        }

        return f(0,1,k,n,prices,dp);
    }
}
