// java

// Recursion

class Solution {
    public int f(int[] nums,int target){
        if(target < 0) return 0;
        if(target==0) return 1;

        int pick=0;
        for(int num:nums){
            pick+=f(nums,target-num);
        }
        return pick;
    }

    public int combinationSum4(int[] nums, int target) {
        int n=nums.length;
        return f(nums,target);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Memoization

class Solution {
    public int f(int[] nums,int target,int[] dp){
        if(target < 0) return 0;
        if(target==0) return 1;

        if(dp[target]!=-1) return dp[target];

        int pick=0;
        for(int num:nums){
            pick+=f(nums,target-num,dp);
        }
        return dp[target] = pick;
    }

    public int combinationSum4(int[] nums, int target) {
        int n=nums.length;
        int[] dp=new int[target+1];
        Arrays.fill(dp,-1);
        return f(nums,target,dp);
    }
}

