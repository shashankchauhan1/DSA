// java

1> Recursion

class Solution {
    public int f(int i,int j,String s,String t){
        if(i<0 || j<0) return 0;

        if(s.charAt(i)==t.charAt(j)) return 1+f(i-1,j-1,s,t);

        return Math.max(f(i-1,j,s,t),f(i,j-1,s,t));
    }

    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        
        int lcs=f(n-1,m-1,word1,word2);

        return (n-lcs) + (m-lcs);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int j,String s,String t,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s.charAt(i)==t.charAt(j)) return 1+f(i-1,j-1,s,t,dp);

        return dp[i][j]=Math.max(f(i-1,j,s,t,dp),f(i,j-1,s,t,dp));
    }

    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int[][] dp=new int[n][m];
        for(int[] d:dp) Arrays.fill(d,-1);

        int lcs=f(n-1,m-1,word1,word2,dp);

        return (n-lcs) + (m-lcs);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int[][] dp=new int[n+1][m+1];
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)) dp[i][j]=1+dp[i-1][j-1];

                else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }

        int lcs = dp[n][m];

        return (n-lcs) + (m-lcs);
    }
}

