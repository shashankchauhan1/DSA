// java

1> Recursive

class Solution {
    public int f(int i,int[] coins,int amount){
        if(i==0){
            if(amount%coins[i]==0) return 1;
            return 0;
        }

        int notpick=f(i-1,coins,amount);
        int pick=0;
        if(amount>=coins[i]) pick=f(i,coins,amount-coins[i]);
        
        return pick+notpick;
    }

    public int change(int amount, int[] coins) {
        int n=coins.length;
        return f(n-1,coins,amount);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int amount,int[] coins,int[][] dp){
        if(i==0){
            if(amount%coins[0]==0) return 1;
            else return 0;
        }
        if(dp[i][amount]!=-1) return dp[i][amount];
        
        int notTake=f(i-1,amount,coins,dp);
        int take=0;
        if(amount>=coins[i]){
            take=f(i,amount-coins[i],coins,dp);
        }
        return dp[i][amount]=take+notTake;
    }

    public int change(int amount, int[] coins) {
        int n=coins.length;
        int[][] dp=new int[n][amount+1];
        for(int[] d:dp) Arrays.fill(d,-1);
        return f(n-1,amount,coins,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int change(int amount, int[] coins) {
        int n=coins.length;
        int[][] dp=new int[n][amount+1];
        
        for(int i=0; i<=amount; i++){
            if(i%coins[0]==0) dp[0][i]=1;
        }

        for(int i=1; i<n; i++){
            for(int amt=0; amt<=amount; amt++){
                int notpick=dp[i-1][amt];
                int pick=0;
                if(amt>=coins[i]) pick=dp[i][amt-coins[i]];

                dp[i][amt]=pick+notpick;
            }
        }
        return dp[n-1][amount];
    }
}

