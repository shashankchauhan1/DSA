// java

1> Memoization Approach

class Solution {
    public int f(int idx,int[] nums,int[] dp){
        if(idx==0) return nums[0];
        if(idx<0) return 0;
        if(dp[idx]!=-1) return dp[idx];

        int pick=nums[idx]+f(idx-2,nums,dp);
        int notPick=0+f(idx-1,nums,dp);
        
        return dp[idx]=Math.max(pick,notPick);
    }

    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1) return nums[0];
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        int ans=f(n-1,nums,dp);
        return dp[n-1];
    }
}

------------------------------------------------------------------------------------------------------------------------

2> Tabulation Approach

class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        dp[0]=nums[0];
        for(int i=1; i<n; i++){
            int pick=nums[i];
            if(i>1) pick+=dp[i-2];

            int notPick=dp[i-1];
            dp[i]=Math.max(pick,notPick); 
        }
        return dp[n-1];
    }
}
