// java

1> Recursive

class Solution {
    public int f(int i,int prev,int n,int[] nums){
        if(i==n) return 0;

        int pick=0;
        if(prev==-1 || nums[i]>nums[prev]){
            pick=1+f(i+1,i,n,nums);
        }
        int notpick=f(i+1,prev,n,nums);

        return Math.max(pick,notpick);
    }

    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        return f(0,-1,n,nums);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization Approach

class Solution {
    public int f(int i,int prev,int n,int[] nums,int[][] dp){
        if(i==n) return 0;
        if(dp[i][prev+1]!=-1) return dp[i][prev+1];

        int take=0;
        if(prev==-1 || nums[i]>nums[prev]){
            take=1+f(i+1,i,n,nums,dp);
        }

        int notTake=f(i+1,prev,n,nums,dp);

        return dp[i][prev+1]=Math.max(take,notTake);
    }

    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n][n+1];
        for(int[] d:dp) Arrays.fill(d,-1);
        return f(0,-1,n,nums,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[n+1][n+1];

        for(int i=n-1; i>=0; i--){
            for(int prev=-1; prev<i; prev++){
                int notpick=dp[i+1][prev+1];
                int pick=0;
                if(prev==-1 || nums[i]>nums[prev]){
                    pick=1+dp[i+1][i+1];
                }

                dp[i][prev+1]=Math.max(pick,notpick);
            }
        }
        return dp[0][0];
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

// binary search approach this solution doesn't gives you the correct sequence but it gives you the correct length.

class Solution {
    public int lengthOfLIS(int[] nums) {
        ArrayList<Integer> list=new ArrayList<>();
        list.add(nums[0]);
        for(int i=1; i<nums.length; i++){
            if(nums[i]>list.get(list.size()-1)){
                list.add(nums[i]);
            }
            else{
                int lb=Collections.binarySearch(list,nums[i]);
                if(lb<0){
                    lb=-lb-1;
                }
                list.set(lb,nums[i]);
            }
        }
        return list.size();
    }
}
