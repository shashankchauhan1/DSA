// java (GFG)

1> Recursive Way    ( Gives TLE )

class Solution {
    int f(int idx,int[] height){
        if(idx==0) return 0;
        
        int ss=f(idx-1,height)+Math.abs(height[idx]-height[idx-1]);
        int ds=Integer.MAX_VALUE;
        if(idx>1)
            ds=f(idx-2,height)+Math.abs(height[idx]-height[idx-2]);
        
        return Math.min(ss,ds);
    }
    
    int minCost(int[] height) {
        int n=height.length;
        
        return f(n-1,height);
    }
}

-----------------------------------------------------------------------------------------

2> Memoization Way  ( Top-Down Approach : reduce the time by using the precomputed overlapping Subproblems, Acceptable on Coding Platforms )

class Solution {
    int f(int idx,int[] height,int[] dp){
        if(idx==0) return 0;
        
        if(dp[idx]!=-1) return dp[idx];
        
        int ss=f(idx-1,height,dp)+Math.abs(height[idx]-height[idx-1]);
        int ds=Integer.MAX_VALUE;
        if(idx>1)
            ds=f(idx-2,height,dp)+Math.abs(height[idx]-height[idx-2]);
        
        return dp[idx]=Math.min(ss,ds);
    }
    
    int minCost(int[] height) {
        int n=height.length;
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        return f(n-1,height,dp);
    }
}


-------------------------------------------------------------------------------------

3> Tabulation Way  ( Bottom-UP Approach : the optimal and scalable , no recursion required)

class Solution {
    int minCost(int[] height) {
        int n=height.length;
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        dp[0]=0;
        
        for(int i=1; i<height.length; i++){
            int ss=dp[i-1]+Math.abs(height[i]-height[i-1]);
            int ds=Integer.MAX_VALUE;
            if(i>1) ds=dp[i-2]+Math.abs(height[i]-height[i-2]);
            
            dp[i]=Math.min(ss,ds);
        }
        return dp[n-1];
    }
}



