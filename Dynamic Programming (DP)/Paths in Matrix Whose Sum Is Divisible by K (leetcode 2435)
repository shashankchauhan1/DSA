// java

class Solution {
    public int f(int i,int j,int n,int m,int sum,int[][] grid,int k,int mod,int[][][] dp){
        if(i>=n || j>=m) return 0;

        sum+=grid[i][j];

        if(i==n-1 && j==m-1){
            if(sum%k==0) return 1;
            else return 0;
        }

        if(dp[i][j][sum%k]!=-1) return dp[i][j][sum%k];

        int bottom = f(i+1,j,n,m,sum,grid,k,mod,dp);
        int right = f(i,j+1,n,m,sum,grid,k,mod,dp);

        return dp[i][j][sum%k] = (bottom + right)%mod;
    }

    public int numberOfPaths(int[][] grid, int k) {
        int n=grid.length;
        int m=grid[0].length;
        int mod=1000000007;

        int[][][] dp=new int[n][m][k];
        for(int[][] dd:dp){
            for(int[] d:dd) Arrays.fill(d,-1);
        }

        return f(0,0,n,m,0,grid,k,mod,dp);
    }
}
