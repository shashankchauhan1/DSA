// java

1> Recursive

class Solution {
    public int f(int i,int j,int[][] matrix){
        if(j<0 || j>=matrix[0].length) return (int)(1e8);
        if(i==matrix.length-1) return matrix[i][j];

        int d=f(i+1,j,matrix);
        int dr=f(i+1,j+1,matrix);
        int dl=f(i+1,j-1,matrix);

        return matrix[i][j]+Math.min(d,Math.min(dl,dr));
    }

    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int min=Integer.MAX_VALUE;
        for(int j=0; j<m; j++){
            min=Math.min(min,f(0,j,matrix));
        }
        return min;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int j,int m,int[][] matrix,int[][] dp){
        if(j<0 || j>=m) return (int)(1e8);
        if(i==0) return matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];

        int up=matrix[i][j]+f(i-1,j,m,matrix,dp);
        int left=matrix[i][j]+f(i-1,j-1,m,matrix,dp);
        int right=matrix[i][j]+f(i-1,j+1,m,matrix,dp);

        return dp[i][j]=Math.min(up,Math.min(right,left));
    }

    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[][] dp=new int[n][m];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        int ans=Integer.MAX_VALUE;
        for(int j=0; j<m; j++){
            ans=Math.min(ans,f(n-1,j,m,matrix,dp));
        }
        return ans;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int[][] dp=new int[n][m];

        for(int i=0; i<n; i++){
            dp[0][i]=matrix[0][i];
        }

        for(int i=1; i<n; i++){
            for(int j=0; j<m; j++){
                int up=matrix[i][j]+dp[i-1][j];
                
                int left=matrix[i][j];
                if(j>0) left+=dp[i-1][j-1];
                else left+=(int)(1e8);
                
                int right=matrix[i][j];
                if(j<n-1) right+=dp[i-1][j+1];
                else right+=(int)(1e8);

                dp[i][j]=Math.min(up,Math.min(left,right));
            }
        }
        int mini=Integer.MAX_VALUE;
        for(int i=0; i<m; i++){
            mini=Math.min(mini,dp[n-1][i]);
        }
        return mini;
    }
}
