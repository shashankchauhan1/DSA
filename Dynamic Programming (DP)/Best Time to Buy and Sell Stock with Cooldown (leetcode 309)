// java

1> Recursive

class Solution {
    public int f(int i,int buy,int n,int[] prices){
        if(i>=n) return 0;

        int profit=0;
        if(buy==1){
            int pick= -prices[i]+f(i+1,0,n,prices);
            int notpick= 0+f(i+1,1,n,prices);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell=prices[i]+f(i+2,1,n,prices);
            int notsell=f(i+1,0,n,prices);
            profit=Math.max(sell,notsell);
        }
        return profit;
    }

    public int maxProfit(int[] prices) {
        int n=prices.length;
        return f(0,1,n,prices);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int buy,int n,int[] prices,int[][] dp){
        if(i>=n) return 0;

        if(dp[i][buy]!=-1) return dp[i][buy];

        int profit=0;
        if(buy==1){
            int pick= -prices[i]+f(i+1,0,n,prices,dp);
            int notpick= 0+f(i+1,1,n,prices,dp);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell=prices[i]+f(i+2,1,n,prices,dp);
            int notsell=f(i+1,0,n,prices,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy]=profit;
    }

    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][] dp=new int[n][2];
        for(int[] d:dp) Arrays.fill(d,-1);

        return f(0,1,n,prices,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][] dp=new int[n+2][2];
        
        // at index >= n ,buy can be anything
        // for(int buy=0; buy<=1; buy++){
        //     dp[n][buy]=0;
        // }

        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<=1; buy++){
                int profit=0;
                if(buy==1){
                    profit=Math.max(-prices[i]+dp[i+1][0], dp[i+1][1]);
                }
                else{
                    profit=Math.max(prices[i]+dp[i+2][1],dp[i+1][0]);
                }
                dp[i][buy]=profit;
            }
        }
        return dp[0][1];        // we started at buy==1
    }
}

