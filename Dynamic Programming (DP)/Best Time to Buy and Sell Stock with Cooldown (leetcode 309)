// java


class Solution {
    public int f(int i,int buy,int n,int[] prices,int[][] dp){
        if(i>=n) return 0;
        
        if(dp[i][buy]!=-1) return dp[i][buy];
        int profit=0;
        if(buy==1){
            int take=-prices[i]+f(i+1,0,n,prices,dp);
            int nottake=0+f(i+1,1,n,prices,dp);
            profit=Math.max(take,nottake);
        }
        else{
            int sell=prices[i]+f(i+2,1,n,prices,dp);
            int notsell=0+f(i+1,0,n,prices,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy]=profit;
    }
    
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][] dp=new int[n][2];
        for(int[] d:dp) Arrays.fill(d,-1);
        return f(0,1,n,prices,dp);
    }
}
