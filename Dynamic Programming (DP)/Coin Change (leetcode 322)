// java


class Solution {
    public int f(int i,int amount,int[] coins,int[][] dp){
        if(i==0){
            if(amount%coins[0]==0) return amount/coins[0];
            else return (int)(1e9);
        }
        if(dp[i][amount]!=-1) return dp[i][amount];

        int notTake=f(i-1,amount,coins,dp);
        int take=(int)(1e9);
        if(amount>=coins[i]){
            take=1+f(i,amount-coins[i],coins,dp);
        }
        return dp[i][amount]=Math.min(take,notTake);
    }

    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int[][] dp=new int[n][amount+1];
        for(int[] d:dp) Arrays.fill(d,-1);
        int ans=f(n-1,amount,coins,dp);
        if(ans>=(int)(1e8)) return -1;
        return ans;
    }
}
