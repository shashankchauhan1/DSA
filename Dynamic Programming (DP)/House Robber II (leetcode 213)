// java

1> Memoization

class Solution {
    public int f(int idx,ArrayList<Integer> list,int[] dp){
        if(idx==0) return list.get(0);
        if(idx<0) return 0;

        if(dp[idx]!=-1) return dp[idx];

        int notpick=0+f(idx-1,list,dp);
        int pick=list.get(idx);
        if(idx>1) pick+=f(idx-2,list,dp);

        return dp[idx]=Math.max(pick,notpick);
    }

    public int rob(int[] nums) {
        ArrayList<Integer> list1=new ArrayList<>();
        ArrayList<Integer> list2=new ArrayList<>();
        int n=nums.length;

        if(n==1) return nums[0];

        for(int i=0; i<n; i++){
            if(i!=0) list2.add(nums[i]);
            if(i!=n-1) list1.add(nums[i]);
        }
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        int ans1=f(list1.size()-1,list1,dp);
        Arrays.fill(dp,-1);
        int ans2=f(list2.size()-1,list2,dp);

        return Math.max(ans1,ans2);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

2> Tabulation

class Solution {
    public int robber(int k,ArrayList<Integer> list){
        int n=list.size();
        int[] dp=new int[n];
        dp[0]=list.get(0);

        for(int i=1; i<n; i++){
            int pick=list.get(i);
            if(i>1) pick+=dp[i-2];
            int notpick=dp[i-1];
            dp[i]=Math.max(pick,notpick);
        }
        return dp[n-1];
    }

    public int rob(int[] nums) {
        int n=nums.length;
        if(n==0) return 0;
        if(n==1) return nums[0];
        ArrayList<Integer> list1=new ArrayList<>();
        ArrayList<Integer> list2=new ArrayList<>();

        for(int i=0; i<n; i++){
            if(i!=0) list1.add(nums[i]);
            if(i!=n-1) list2.add(nums[i]);
        }

        int cnt1=robber(n-1,list1);
        int cnt2=robber(n-1,list2);
        return Math.max(cnt1,cnt2);
    }
}
