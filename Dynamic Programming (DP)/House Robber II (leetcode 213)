// java

class Solution {
    public int robber(int k,ArrayList<Integer> list){
        int n=list.size();
        int[] dp=new int[n];
        dp[0]=list.get(0);

        for(int i=1; i<n; i++){
            int pick=list.get(i);
            if(i>1) pick+=dp[i-2];
            int notpick=dp[i-1];
            dp[i]=Math.max(pick,notpick);
        }
        return dp[n-1];
    }

    public int rob(int[] nums) {
        int n=nums.length;
        if(n==0) return 0;
        if(n==1) return nums[0];
        ArrayList<Integer> list1=new ArrayList<>();
        ArrayList<Integer> list2=new ArrayList<>();

        for(int i=0; i<n; i++){
            if(i!=0) list1.add(nums[i]);
            if(i!=n-1) list2.add(nums[i]);
        }

        int cnt1=robber(n-1,list1);
        int cnt2=robber(n-1,list2);
        return Math.max(cnt1,cnt2);
    }
}
