// java

1> Recursive

class Solution {
    public int f(int i,int j){
        if(i<0 || j<0) return 0;
        if(i==0 && j==0) return 1;

        int up=f(i-1,j);
        int left=f(i,j-1);
        return up+left;
    } 

    public int uniquePaths(int n, int m) {
        return f(n-1,m-1);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int j,int[][] dp){
        if(i<0 || j<0) return 0;
        if(i==0 && j==0) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=f(i-1,j,dp);
        int left=f(i,j-1,dp);
        return dp[i][j]=up+left;
    } 

    public int uniquePaths(int n, int m) {
        int[][] dp=new int[n][m];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        return f(n-1,m-1,dp);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int uniquePaths(int n, int m) {
        int[][] dp=new int[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j==0){
                    dp[i][j]=1;
                    continue;
                }
                int up=0,left=0;
                if(i>0) up=dp[i-1][j];
                if(j>0) left=dp[i][j-1];
                dp[i][j]=up+left;
            }
        }
        return dp[n-1][m-1];
    }
}
