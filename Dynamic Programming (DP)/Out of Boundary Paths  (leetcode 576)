// java

1> Recursive

class Solution {
    public int f(int i,int j,int n,int m,int maxMove,int mod){
        if(i<0 || j<0 || i>=n || j>=m) return 1;
        if(maxMove<=0) return 0;

        int up=f(i-1,j,n,m,maxMove-1,mod)%mod;
        int down=f(i+1,j,n,m,maxMove-1,mod)%mod;
        int left=f(i,j-1,n,m,maxMove-1,mod)%mod;
        int right=f(i,j+1,n,m,maxMove-1,mod)%mod;

        return ((up+down)%mod+(left+right)%mod)%mod;
    }

    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int mod=(int)(1e9+7);
        return f(startRow,startColumn,m,n,maxMove,mod);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int j,int n,int m,int maxMove,int[][][] dp,int mod){
        if(i<0 || j<0 || i>=n || j>=m) return 1;
        if(maxMove<=0) return 0;

        if(dp[i][j][maxMove]!=-1) return dp[i][j][maxMove];

        int up=f(i-1,j,n,m,maxMove-1,dp,mod)%mod;
        int down=f(i+1,j,n,m,maxMove-1,dp,mod)%mod;
        int left=f(i,j-1,n,m,maxMove-1,dp,mod)%mod;
        int right=f(i,j+1,n,m,maxMove-1,dp,mod)%mod;

        return dp[i][j][maxMove]=((up+down)%mod+(left+right)%mod)%mod;
    }

    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int mod=(int)(1e9+7);
        int[][][] dp=new int[m][n][maxMove+1];
        
        for(int[][] dd:dp){
            for(int[] d:dd){
                Arrays.fill(d,-1);
            }
        }

        return f(startRow,startColumn,m,n,maxMove,dp,mod);
    }
}

