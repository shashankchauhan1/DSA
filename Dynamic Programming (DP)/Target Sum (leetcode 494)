// java

// Recursion

class Solution {
    public int f(int i,int n,int[] nums,int sum,int target){
        if(i>=n){
            if(sum==target) return 1;
            return 0;
        }

        int add=f(i+1,n,nums,sum+nums[i],target);
        int sub=f(i+1,n,nums,sum-nums[i],target);

        return add+sub;
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n=nums.length;

        return f(0,n,nums,0,target);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

// Memoization    (offset, int[][] dp)

class Solution {
    public int f(int i,int n,int[] nums,int sum,int target,int[][] dp,int total){
        if(i>=n){
            if(sum==target) return 1;
            return 0;
        }

        if(dp[i][sum+total]!=-1) return dp[i][sum+total];

        int add=f(i+1,n,nums,sum+nums[i],target,dp,total);
        int sub=f(i+1,n,nums,sum-nums[i],target,dp,total);

        return dp[i][sum+total] = add+sub;
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n=nums.length;
        int total=0;
        for(int num:nums) total+=num;

        // due to -ve elements
        int[][] dp=new int[n+1][2*total+1];
        for(int[] d:dp) Arrays.fill(d,-1);

        return f(0,n,nums,0,target,dp,total);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Memoization (Map) key = i+","+sum;

class Solution {
    public int f(int i,int n,int[] nums,int target,int sum,Map<String,Integer> map){
        if(i==n){
            if(target==sum) return 1;
            else return 0;
        }

        String key = i+","+sum;
        if(map.containsKey(key)) return map.get(key);

        int add = f(i+1,n,nums,target,sum+nums[i],map);
        int sub = f(i+1,n,nums,target,sum-nums[i],map);
        
        map.put(key,add+sub);
        return map.get(key);
    }

    public int findTargetSumWays(int[] nums, int target) {
        int n=nums.length;
        int total = 0;
        Map<String,Integer> map = new HashMap<>();

        return f(0,n,nums,target,0,map);
    }
}

