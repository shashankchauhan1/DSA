// java

1> Recursion

class Solution {
    public int f(int i,int n,String s){
        if(i==n) return 1;
        if(s.charAt(i)=='0') return 0;

        int pickone=f(i+1,n,s);
        int picktwo=0;
        if(i+1<n){
            int num=Integer.parseInt(s.substring(i,i+2));
            if(num>=10 && num<=26){
                picktwo=f(i+2,n,s);
            }
        }
        return pickone+picktwo;
    }

    public int numDecodings(String s) {
        int n=s.length();
        return f(0,n,s);
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int n,String s,int[] dp){
        if(i==n) return 1;
        if(s.charAt(i)=='0') return 0;

        if(dp[i]!=-1) return dp[i];

        int pickone=f(i+1,n,s,dp);
        int picktwo=0;
        if(i+1<n){
            int num=Integer.parseInt(s.substring(i,i+2));
            if(num>=10 && num<=26){
                picktwo=f(i+2,n,s,dp);
            }
        }
        return dp[i]=pickone+picktwo;
    }

    public int numDecodings(String s) {
        int n=s.length();
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        return f(0,n,s,dp);
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int numDecodings(String s) {
        int n=s.length();
        int[] dp=new int[n+1];
        dp[n]=1;
        
        for(int i=n-1; i>=0; i--){
            if(s.charAt(i)=='0'){
                dp[i]=0;
                continue;
            }

            int pickone=dp[i+1];
            int picktwo=0;
            if(i+1<n){
                int num=Integer.parseInt(s.substring(i,i+2));
                if(num>=10 && num<=26) picktwo=dp[i+2];
            }

            dp[i]=pickone+picktwo;
        }

        return dp[0];
    }
}

