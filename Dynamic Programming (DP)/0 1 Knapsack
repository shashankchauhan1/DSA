// java

1> Recursive

class Solution {
    static int f(int i,int[] val,int[] wt,int capacity){
        if(i==0){
            if(capacity>=wt[0]) return val[0];
            return 0;
        }

        int notpick=f(i-1,val,wt,capacity);
        int pick=0;
        if(wt[i]<=capacity){
            pick=val[i]+f(i-1,val,wt,capacity-wt[i]);
        }
        return Math.max(pick,notpick);
    }
    
    static int knapsack(int W, int val[], int wt[]) {
        int n=wt.length;
        return f(n-1,val,wt,W);
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    static int f(int i,int[] val,int[] wt,int capacity,int[][] dp){
        if(i==0){
            if(capacity>=wt[0]) return val[0];
            return 0;
        }
        if(dp[i][capacity]!=-1) return dp[i][capacity];
        
        int notpick=f(i-1,val,wt,capacity,dp);
        int pick=0;
        if(wt[i]<=capacity){
            pick=val[i]+f(i-1,val,wt,capacity-wt[i],dp);
        }
        return dp[i][capacity]=Math.max(pick,notpick);
    }
    
    static int knapsack(int W, int val[], int wt[]) {
        int n=wt.length;
        int[][] dp=new int[n][W+1];
        for(int[] d:dp){
            Arrays.fill(d,-1);
        }
        return f(n-1,val,wt,W,dp);
    }
}

