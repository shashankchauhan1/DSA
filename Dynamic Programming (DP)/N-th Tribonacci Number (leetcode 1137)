// Java

// Recursion (TLE)

class Solution {
    public int tribonacci(int n) {
        if(n<=0) return 0;
        if(n<=1) return 1;

        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Memoization

class Solution {
    public int f(int i,int[] dp){
        if(i<=0) return 0;
        if(i<=1) return 1;

        if(dp[i]!=-1) return dp[i];

        return dp[i] = f(i-1,dp) + f(i-2,dp) + f(i-3,dp);
    }

    public int tribonacci(int n) {
        if(n<=0) return 0;
        if(n<=1) return 1;

        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);

        return f(n,dp);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Tabulation

class Solution {
    public int tribonacci(int n) {
        if(n<=0) return 0;
        if(n<=1) return 1;

        int[] dp = new int[n+1];
        dp[0]=0;
        dp[1]=1;
        dp[2]=1;
        
        for(int i=3; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];
        }

        return dp[n];
    }
}
