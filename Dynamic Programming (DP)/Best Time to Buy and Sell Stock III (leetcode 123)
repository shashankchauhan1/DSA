// java

1> Recursive

class Solution {
    public int f(int i,int buy,int cap,int[] prices,int n){
        if(cap==0) return 0;
        if(i==n) return 0;
        int profit=0;
        if(buy==1){
            int pick= -prices[i] + f(i+1,0,cap,prices,n);
            int notpick= 0+f(i+1,1,cap,prices,n);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell= prices[i] + f(i+1,1,cap-1,prices,n);
            int notsell= 0+f(i+1,0,cap,prices,n);
            profit=Math.max(sell,notsell);
        }
        return profit;
    }

    public int maxProfit(int[] prices) {
        int n=prices.length;
        return f(0,1,2,prices,n);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public int f(int i,int buy,int cap,int[] prices,int n,int[][][] dp){
        if(cap==0) return 0;
        if(i==n) return 0;

        if(dp[i][buy][cap]!=-1) return dp[i][buy][cap];

        int profit=0;
        if(buy==1){
            int pick= -prices[i] + f(i+1,0,cap,prices,n,dp);
            int notpick= 0+f(i+1,1,cap,prices,n,dp);
            profit=Math.max(pick,notpick);
        }
        else{
            int sell= prices[i] + f(i+1,1,cap-1,prices,n,dp);
            int notsell= 0+f(i+1,0,cap,prices,n,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy][cap]=profit;
    }

    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n][2][3];

        for(int[][] dd:dp){
            for(int[] d:dd){
                Arrays.fill(d,-1);
            }
        }
        
        return f(0,1,2,prices,n,dp);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

3> Tabulation

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int[][][] dp=new int[n+1][2][3];

        // cap==0 , i and buy can be anything
        // for(int i=0; i<=n; i++){
        //     for(int buy=0; buy<=1; buy++){
        //         dp[i][buy][0]=0;
        //     }
        // }

        // at idx == n, the buy and cap can be anything
        // for(int buy=0; buy<=1; buy++){
        //     for(int cap=1; cap<=2; cap++){
        //         dp[n][buy][cap]=0;
        //     }
        // }


        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<=1; buy++){
                for(int cap=1; cap<=2; cap++){
                    int profit=0;
                    if(buy==1){
                        profit=Math.max(-prices[i]+dp[i+1][0][cap], dp[i+1][1][cap]);
                    }
                    else{
                        profit=Math.max(prices[i]+dp[i+1][1][cap-1], dp[i+1][0][cap]);
                    }
                    dp[i][buy][cap]=profit;
                }
            }
        }

        return dp[0][1][2]; // start with buy==1 with capacity of 2.
    }
}

