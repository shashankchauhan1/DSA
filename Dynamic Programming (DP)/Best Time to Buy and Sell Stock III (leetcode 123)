// java

1> DP Approach (Memoization)

class Solution {
    public int f(int i,int buy,int cap,int n,int[] prices,int[][][] dp){
        if(i==n || cap==0) return 0;
        if(dp[i][buy][cap]!=-1) return dp[i][buy][cap];
        int profit=0;
        if(buy==1){
            int take=-prices[i]+f(i+1,0,cap,n,prices,dp);
            int nottake=0+f(i+1,1,cap,n,prices,dp);
            profit=Math.max(take,nottake);
        }
        else{
            int sell=prices[i]+f(i+1,1,cap-1,n,prices,dp);
            int notsell=0+f(i+1,0,cap,n,prices,dp);
            profit=Math.max(sell,notsell);
        }
        return dp[i][buy][cap]=profit;
    }

    public int maxProfit(int[] prices) {
        int n=prices.length;
        int cap=2;
        int[][][] dp=new int[n][2][3];
        for(int[][] dd:dp){
            for(int[] d:dd){
                Arrays.fill(d,-1);
            }
        }
        return f(0,1,cap,n,prices,dp);
    }
}

