// java

// find the LIS from 0->n and n->0 store in dp1 and dp2, now add sum=dp1[i]-dp2[i] then subtract sum-1 and found the max

class Solution {
    public static int LongestBitonicSequence(int n, int[] nums) {
        int[] dp1=new int[n];
        Arrays.fill(dp1,1);
        
        int[] dp2=new int[n];
        Arrays.fill(dp2,1);
        
        for(int i=0; i<n; i++){
            for(int prev=0; prev<i; prev++){
                if(nums[i] > nums[prev] && 1+dp1[prev] > dp1[i]){
                    dp1[i]=1+dp1[prev];
                }
            }
        }
        
        for(int i=n-1; i>=0; i--){
            for(int prev=i+1; prev<n; prev++){
                if(nums[i] > nums[prev] && 1+dp2[prev] > dp2[i]){
                    dp2[i]=1+dp2[prev];
                }
            }
        }
        int max=0;
        for(int i=0; i<n; i++){
            if(dp1[i]>1 && dp2[i]>1)
                max=Math.max(max,dp1[i]+dp2[i]-1);
        }
        return max;
    }
}

