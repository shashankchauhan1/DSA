 // java

1> Recursive

class Solution {
    public boolean f(int i,int[] nums,int target){
        if(target==0) return true;
        if(i==0) return nums[0]==target;

        boolean pick=false;
        if(nums[i]<=target) pick=f(i-1,nums,target-nums[i]);
        boolean notPick=f(i-1,nums,target);

        return pick || notPick;
    }

    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int num:nums){
            sum+=num;
        }
        if(sum%2!=0) return false;
        int target=sum/2;
        int n=nums.length;
        return f(n-1,nums,target);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Memoization

class Solution {
    public boolean f(int i,int[] nums,int target,Boolean[][] dp){
        if(target==0) return true;
        if(i==0) return nums[0]==target;
        if(dp[i][target]!=null) return dp[i][target];
        boolean pick=false;
        if(nums[i]<=target) pick=f(i-1,nums,target-nums[i],dp);
        boolean notPick=f(i-1,nums,target,dp);

        return dp[i][target]=pick || notPick;
    }

    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int num:nums) sum+=num;

        if(sum%2!=0) return false;
        
        int target=sum/2;
        int n=nums.length;
        Boolean[][] dp=new Boolean[n][target+1];
        
        return f(n-1,nums,target,dp);
    }
}

