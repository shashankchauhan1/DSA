// java

1> Brute Force : O(n^2)    TLE

class Solution {
    static int inversionCount(int arr[]) {
        // Code Here
        int n=arr.length;
        int count=0;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(arr[i]>arr[j]) count++;
            }
        }
        return count;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2> Optimized Approach : O(nlogn)    MergeSort ,while merging if condition satisfy then count+=(mid-i+1) because from i to mid all the elements are greater than j.

class Solution {
    static void merge(int s,int mid,int e,int[] arr,int[] count){
        int i=s;
        int j=mid+1;
        ArrayList<Integer> list=new ArrayList<>();
        
        while(i<=mid && j<=e){
            if(arr[i]<=arr[j]){
                list.add(arr[i]);
                i++;
            }
            else{
                count[0]+=(mid-i+1);
                list.add(arr[j]);
                j++;
            }
        }
        
        while(i<=mid){
            list.add(arr[i]);
            i++;
        }
        
        while(j<=e){
            list.add(arr[j]);
            j++;
        }
        
        for(int k=s; k<=e; k++){
            arr[k]=list.get(k-s);
        }
        
    }
    
    static void f(int s,int e,int[] arr,int[] count){
        if(s>=e) return;
        
        int mid=s+(e-s)/2;
        f(s,mid,arr,count);
        f(mid+1,e,arr,count);
        merge(s,mid,e,arr,count);
        
    }
    
    static int inversionCount(int arr[]) {
        if(arr.length<=1) return 0;
        int count[]=new int[1];
        
        f(0,arr.length-1,arr,count);
        return count[0];
    }
}
