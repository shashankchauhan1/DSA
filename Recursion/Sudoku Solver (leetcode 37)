// java


class Solution {
    public boolean isSafe(char[][] board,int r,int c,char dig){
        // horizontally
        for(int j=0; j<9; j++){
            if(board[r][j]==dig) return false;
        }

        // vertically
        for(int i=0; i<9; i++){
            if(board[i][c]==dig) return false;
        }

        // 3x3 grid
        int sr=(r/3)*3;
        int sc=(c/3)*3;

        for(int i=sr; i<=sr+2; i++){
            for(int j=sc; j<=sc+2; j++){
                if(board[i][j]==dig) return false;
            }
        }
        return true;
    }
    public boolean ss(char[][] board,int r,int c){
        if(r==9) return true;

        int nr=r;
        int nc=c+1;
        if(nc==9){
            nr=r+1;
            nc=0;
        }

        if(board[r][c]!='.') return ss(board,nr,nc);

        for(char dig='1'; dig<='9'; dig++){
            if(isSafe(board,r,c,dig)){
                board[r][c]=dig;
                if(ss(board,nr,nc)) return true;
                board[r][c]='.';
            }
        }
        return false;
    }

    public void solveSudoku(char[][] board) {
        ss(board,0,0);
    }
}
