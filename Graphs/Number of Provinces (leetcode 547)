// java



class Solution {

    public void dfs(int node,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        vis[node]=true;
        for(int it:adj.get(node)){
            if(vis[it]==false){
                dfs(it,adj,vis);
            }
        }
    }

    public int findCircleNum(int[][] isConnected) {
        int n=isConnected.length;
        int m=isConnected[0].length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        int cnt=0;
        boolean[] vis=new boolean[n];
        for(int i=0; i<n; i++){
            if(vis[i]==false){
                dfs(i,adj,vis);
                cnt++;
            }
        }
        return cnt;
    }
}
