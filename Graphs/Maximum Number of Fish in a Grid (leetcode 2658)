// java

class Solution {
    public void dfs(int r,int c,boolean[][] vis,int[][] grid,int[] sum){
        vis[r][c]=true;
        sum[0]+=grid[r][c];
        int n=grid.length;
        int m=grid[0].length;
        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};

        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]!=0){
                dfs(nrow,ncol,vis,grid,sum);
            }
        }
    }

    public int findMaxFish(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;

        int ans=0;
        boolean[][] vis=new boolean[n][m];

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!vis[i][j] && grid[i][j]!=0){
                    int[] sum=new int[1];
                    dfs(i,j,vis,grid,sum);
                    ans=Math.max(ans,sum[0]);
                }
            }
        }

        return ans;
    }
}
