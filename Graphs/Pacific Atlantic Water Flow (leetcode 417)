// java

class Solution {
    public void pacificDfs(int r,int c,int[][] heights,boolean[][] pacific){
        pacific[r][c]=true;

        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};

        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<heights.length && ncol>=0 && ncol<heights[0].length && heights[nrow][ncol]>=heights[r][c] && !pacific[nrow][ncol]){
                pacificDfs(nrow,ncol,heights,pacific);
            }
        }
    }

    public void atlanticDfs(int r,int c,int[][] heights,boolean[][] atlantic){
        atlantic[r][c]=true;

        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};

        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<heights.length && ncol>=0 && ncol<heights[0].length && heights[nrow][ncol]>=heights[r][c] && !atlantic[nrow][ncol]){
                atlanticDfs(nrow,ncol,heights,atlantic);
            }
        }
    }

    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int n=heights.length;
        int m=heights[0].length;

        boolean[][] pacific=new boolean[n][m];
        for(int i=0; i<m; i++){
            pacificDfs(0,i,heights,pacific);    // top row
        }

        for(int i=0; i<n; i++){
            pacificDfs(i,0,heights,pacific);    // left col
        }

        boolean[][] atlantic=new boolean[n][m];
        for(int i=0; i<m; i++){
            atlanticDfs(n-1,i,heights,atlantic);    // bottom row
        }

        for(int i=0; i<n; i++){
            atlanticDfs(i,m-1,heights,atlantic);    // right col
        }

        List<List<Integer>> result = new ArrayList<>();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(pacific[i][j] && atlantic[i][j]){
                    result.add(Arrays.asList(i,j));
                }
            }
        }

        return result;
    }
}
