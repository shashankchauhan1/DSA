// java   (GEEKS FOR GEEKS)

class Solution {
    void dfs(int r,int c,int[][] grid,boolean[][] vis,int pr,int pc,ArrayList<String> list){
        vis[r][c]=true;
        list.add((r-pr)+","+(c-pc));
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        int n=grid.length;
        int m=grid[0].length;
        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]==1){
                dfs(nrow,ncol,grid,vis,pr,pc,list);
            }
        }
        
    }
    
    int countDistinctIslands(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        
        HashSet<ArrayList<String>> set=new HashSet<>();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    ArrayList<String> list=new ArrayList<>();
                    dfs(i,j,grid,vis,i,j,list);
                    set.add(list);
                }
            }
        }
        return set.size();
    }
}
