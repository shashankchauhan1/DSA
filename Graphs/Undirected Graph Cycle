// java (Geeks for Geeks)

// BFS

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public boolean bfs(int n,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        vis[n]=true;
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(n,-1));
        while(!q.isEmpty()){
            Pair p=q.poll();
            int node=p.first;
            int parent=p.second;
            for(int it:adj.get(node)){
                if(!vis[it]){
                    q.offer(new Pair(it,node));
                    vis[it]=true;
                }
                else if(parent!=it) return true;
            }
        }
        return false;
    }
    
    public boolean isCycle(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        boolean[] vis=new boolean[V];
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(bfs(i,adj,vis)) return true;
            }
        }
        return false;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
