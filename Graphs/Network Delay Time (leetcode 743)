// java

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0; i<=n; i++) adj.add(new ArrayList<Pair>());

        for(int[] time:times){
            int u=time[0];
            int v=time[1];
            int w=time[2];
            adj.get(u).add(new Pair(v,w));
        }

        int[] dist=new int[n+1];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[k]=0;
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.second-b.second);
        q.offer(new Pair(k,0));

        while(!q.isEmpty()){
            Pair p=q.poll();
            int node=p.first;
            int d=p.second;
            for(Pair neighbour:adj.get(node)){
                int adjNode=neighbour.first;
                int w=neighbour.second;
                if(d+w<dist[adjNode]){
                    dist[adjNode]=d+w;
                    q.offer(new Pair(adjNode,dist[adjNode]));
                }
            }
        }
        int ans=-1;

        for(int i=1; i<=n; i++){
            if(dist[i]==Integer.MAX_VALUE) return -1;
            ans=Math.max(ans,dist[i]);
        }
        return ans;
    }
}

