// java


class Solution {
    
    public void dfs(int node,int []vis,int[][] edges,ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> list){
        vis[node]=1;
        list.add(node);
        for(int it:adj.get(node)){
            if(vis[it]==0){
                dfs(it,vis,edges,adj,list);
            }
        }
    }
    
    public ArrayList<ArrayList<Integer>> connectedcomponents(int v, int[][] edges) {
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0; i<v; i++) adj.add(new ArrayList<>());
        
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        int[] vis=new int[v];
        for(int i=0; i<v; i++){
            if(vis[i]==0){
                ArrayList<Integer> list=new ArrayList<>();
                dfs(i,vis,edges,adj,list);
                Collections.sort(list);
                result.add(list);
            }
        }
        return result;
    }
}
