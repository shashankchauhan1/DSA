// java

class DisjointSet{
    List<Integer> parent=new ArrayList<>();
    List<Integer> size=new ArrayList<>();

    public DisjointSet(int n){
        for(int i=0; i<n; i++){
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node){
        if(node==parent.get(node)) return node;
        int ulp=findUPar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }

    public boolean unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(ulp_u==ulp_v) return true;
        if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v, size.get(ulp_u) + size.get(ulp_v));
        }
        else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
        return false;
    }

}

class Solution {
    public int makeConnected(int n, int[][] connections) {
        DisjointSet ds=new DisjointSet(n);
        int extraEdge=0;
        for(int[] edge:connections){
            int u=edge[0];
            int v=edge[1];
            if(ds.unionBySize(u,v)) extraEdge++;
        }

        int components=0;
        for(int i=0; i<n; i++){
            if(ds.parent.get(i)==i) components++;
        }
        int edgeRequired=components-1;
        if(extraEdge>=edgeRequired) return edgeRequired;
        return -1;
    }
}

