// java


class Pair{
    int row;
    int col;
    Pair(int r,int c){
        this.row=r;
        this.col=c;
    }
}

class Solution {

    public void bfs(int row,int col,char[][] grid,int[][] vis){
        vis[row][col]=1;
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(row,col));
        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};
        while(!q.isEmpty()){
            Pair p=q.poll();
            int r=p.row;
            int c=p.col;
            for(int i=0; i<4; i++){
                int nrow=r+delRow[i];
                int ncol=c+delCol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && vis[nrow][ncol]==0){
                    vis[nrow][ncol]=1;
                    q.offer(new Pair(nrow,ncol));
                }
            }
        }

    }

    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int [][]vis=new int[n][m];
        int count=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1' && vis[i][j]==0){
                    count++;
                    bfs(i,j,grid,vis);
                }
            }
        }
        return count;
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// c++


#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Pair {
public:
    int row;
    int col;
    Pair(int r, int c) {
        row = r;
        col = c;
    }
};

class Solution {
public:
    void bfs(int row, int col, vector<vector<char>>& grid, vector<vector<int>>& vis) {
        vis[row][col] = 1;
        int n = grid.size();
        int m = grid[0].size();
        queue<Pair> q;
        q.push(Pair(row, col));

        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        while (!q.empty()) {
            Pair p = q.front();
            q.pop();
            int r = p.row;
            int c = p.col;

            for (int i = 0; i < 4; ++i) {
                int nrow = r + delRow[i];
                int ncol = c + delCol[i];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
                    && grid[nrow][ncol] == '1' && vis[nrow][ncol] == 0) {
                    vis[nrow][ncol] = 1;
                    q.push(Pair(nrow, ncol));
                }
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int count = 0;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == '1' && vis[i][j] == 0) {
                    ++count;
                    bfs(i, j, grid, vis);
                }
            }
        }
        return count;
    }
};
