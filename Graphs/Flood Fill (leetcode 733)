// java


class Solution {
    public void dfs(int r,int c,int[][] image,int[][] ans,int[] delRow,int[] delCol,int initialColor,int newColor){
        ans[r][c]=newColor;
        int n=image.length;
        int m=image[0].length;
        for(int i=0; i<4; i++){
            int nrow=r+delRow[i];
            int ncol=c+delCol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==initialColor && ans[nrow][ncol]!=newColor){
                dfs(nrow,ncol,image,ans,delRow,delCol,initialColor,newColor);
            }
        }
    }

    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int initialColor=image[sr][sc];
        int[][] ans=image;
        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};
        dfs(sr,sc,image,ans,delRow,delCol,initialColor,color);
        return ans;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

// cpp

class Solution {
public:
    void dfs(int r, int c, vector<vector<int>>& ans, vector<vector<int>>& image, int ic, int nc, int delRow[], int delCol[]) {
        ans[r][c] = nc;
        int n = image.size();
        int m = image[0].size();

        for (int i = 0; i < 4; i++) {
            int nrow = r + delRow[i];
            int ncol = c + delCol[i];
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                image[nrow][ncol] == ic && ans[nrow][ncol] != nc) {
                dfs(nrow, ncol, ans, image, ic, nc, delRow, delCol);
            }
        }
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        vector<vector<int>> ans = image; 
        int ic = image[sr][sc];
        int delRow[4] = {-1, 0, 1, 0};
        int delCol[4] = {0, 1, 0, -1};

        dfs(sr, sc, ans, image, ic, color, delRow, delCol);
        return ans;
    }
};


