// java

// 1> Do N-1 iterations to get the shortest path after covering all the possible paths.
// 2> Do the Nth iteration to check if there's another shortest path found then there's a negative cycle return -1.


class Solution {
    public int[] bellmanFord(int V, int[][] edges, int src) {
        
        int inm=(int)(1e8);
        int[] dist=new int[V];
        Arrays.fill(dist,inm);
        dist[src]=0;
        
        for(int i=0; i<V-1; i++){
            for(int[] edge:edges){
                int u=edge[0];
                int v=edge[1];
                int w=edge[2];
                if(dist[u]!=inm && ((long)dist[u]+w<dist[v])){
                    dist[v]=(int)((long)dist[u]+w);
                }
            }
        }
        
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            if(dist[u]!=inm && dist[u]+w<dist[v]){
                return new int[]{-1};
            }
        }
        return dist;
    }
}

