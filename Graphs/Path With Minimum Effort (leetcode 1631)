// java

class Pair{
    int dist;
    int row;
    int col;
    Pair(int d,int r,int c){
        this.dist=d;
        this.row=r;
        this.col=c;
    }
}

class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n=heights.length;
        int m=heights[0].length;
        
        int[][] dist=new int[n][m];
        for(int[] d:dist) Arrays.fill(d,Integer.MAX_VALUE);
        
        dist[0][0]=0;
        
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.dist-b.dist);
        q.offer(new Pair(0,0,0));

        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        while(!q.isEmpty()){
            Pair p=q.poll();
            int r=p.row;
            int c=p.col;
            int d=p.dist;
            if(r==n-1 && c==m-1) return d;

            for(int i=0; i<4; i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    int effort=Math.max(d,Math.abs(heights[r][c]-heights[nrow][ncol]));
                    if(effort<dist[nrow][ncol]){
                        dist[nrow][ncol]=effort;
                        q.offer(new Pair(effort,nrow,ncol));
                    }
                }
            }
        }
        return -1;
    }
}
