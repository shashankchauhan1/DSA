// java

class Pair{
    int row;
    int col;
    int time;
    Pair(int r,int c, int t){
        this.row=r;
        this.col=c;
        this.time=t;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();
        int cntFresh=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1) cntFresh++;
                if(grid[i][j]==2) q.offer(new Pair(i,j,0));
            }
        }

        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};
        int tm=0;
        int cnt=0;
        while(!q.isEmpty()){
            Pair node=q.poll();
            int r=node.row;
            int c=node.col;
            int t=node.time;
            tm=Math.max(tm,t);
            for(int i=0; i<4; i++){
                int nrow=r+delRow[i];
                int ncol=c+delCol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1){
                    cnt++;
                    grid[nrow][ncol]=2;
                    q.offer(new Pair(nrow,ncol,t+1));
                }
            }
        }
        return cnt==cntFresh ? tm : -1;
    }
}
