// java

class Pair{
    int row;
    int col;
    int dist;
    Pair(int r,int c,int d){
        this.row=r;
        this.col=c;
        this.dist=d;
    }
}

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();

        if(grid[0][0]!=0 || grid[n-1][m-1]!=0) return -1;

        int[] delrow={-1,-1,0,1,1,1,0,-1};
        int[] delcol={0,1,1,1,0,-1,-1,-1};

        q.offer(new Pair(0,0,1));
        grid[0][0]=1;
        while(!q.isEmpty()){
            Pair p=q.poll();
            int r=p.row;
            int c=p.col;
            int d=p.dist;
            if(r==n-1 && c==m-1) return d;

            for(int i=0; i<8; i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0){
                    grid[nrow][ncol]=1;
                    q.offer(new Pair(nrow,ncol,d+1));
                }
            }
        }
        return -1;
    }
}
