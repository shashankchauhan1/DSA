// java

class Solution {
    public void dfs(int r,int c,int[][] vis,int[][] land,int[] max){
        vis[r][c]=1;
        if(r>max[0] || c>max[1]){
            max[0]=r;
            max[1]=c;
        }

        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};

        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<land.length && ncol>=0 && ncol<land[0].length && vis[nrow][ncol]==0 && land[nrow][ncol]==1){
                dfs(nrow,ncol,vis,land,max);
            }
        }

    }

    public int[][] findFarmland(int[][] land) {
        int n=land.length;
        int m=land[0].length;
        int[][] vis=new int[n][m];

        ArrayList<ArrayList<Integer>> result=new ArrayList<>();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(land[i][j]==1 && vis[i][j]==0){
                    ArrayList<Integer> list=new ArrayList<>();
                    list.add(i);
                    list.add(j);
                    int max[]={i,j};
                    dfs(i,j,vis,land,max);
                    list.add(max[0]);
                    list.add(max[1]);
                    result.add(list);
                }
            }
        }

        int sizerow=result.size();
        if(sizerow==0) return new int[][] {};
        int sizecol=result.get(0).size();

        int[][] ans=new int[sizerow][sizecol];

        for(int i=0; i<sizerow; i++){
            for(int j=0; j<sizecol; j++){
                ans[i][j]=result.get(i).get(j);
            }
        }

        return ans;
    }
}
