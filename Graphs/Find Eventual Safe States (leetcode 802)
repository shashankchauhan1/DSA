// java

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int v=graph.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<v; i++) adj.add(new ArrayList<>());

        int[] indegree=new int[v];
        
        for(int i=0; i<v; i++){
            for(int it:graph[i]){
                adj.get(it).add(i);
                indegree[i]++;
            }
        }

        Queue<Integer> q=new LinkedList<>();
        for(int i=0; i<v; i++){
            if(indegree[i]==0) q.offer(i);
        }

        ArrayList<Integer> list=new ArrayList<>();
        while(!q.isEmpty()){
            int node=q.poll();
            list.add(node);
            for(int it:adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0) q.offer(it);
            }
        }

        Collections.sort(list);
        return list;
    }
}
