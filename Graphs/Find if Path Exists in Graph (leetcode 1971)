// java


class Solution {
    public void bfs(int node,int src,int dest,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        vis[node]=true;
        Queue<Integer> q=new LinkedList<>();
        q.offer(node);
        while(!q.isEmpty()){
            int n=q.poll();
            for(int it:adj.get(n)){
                if(!vis[it]){
                    q.offer(it);
                    vis[it]=true; 
                }   
            }
        }

    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<n; i++) adj.add(new ArrayList<>());
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        boolean[] vis=new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                bfs(i,source,destination,adj,vis);
            }
            if(vis[source]==true && vis[destination]==true) return true;
            if(vis[destination]==true) return false;
            if(vis[source]==true) return false;
        }
        return false;
    }
}
