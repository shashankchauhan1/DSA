// java

// Using DisjointSet

class DisjointSet{
    List<Integer> parent=new ArrayList<>();
    List<Integer> size=new ArrayList<>();

    public DisjointSet(int n){
        for(int i=0; i<n; i++){
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node){
        if(parent.get(node)==node) return node;
        int ulp=findUPar(parent.get(node));
        parent.set(node,ulp);
        return ulp;
    }

    public boolean unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(ulp_u==ulp_v) return true;

        if(size.get(ulp_u) <= size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_u) + size.get(ulp_v));
        }
        else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_u) + size.get(ulp_v));
        }
        return false;
    }

}

class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        DisjointSet ds=new DisjointSet(n);
        
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            ds.unionBySize(u,v);
        }

        int ulp_src=ds.findUPar(source);
        int ulp_dst=ds.findUPar(destination);
        
        return ulp_src==ulp_dst;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Using BFS

class Solution {
    public void bfs(int node,int src,int dest,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        vis[node]=true;
        Queue<Integer> q=new LinkedList<>();
        q.offer(node);
        while(!q.isEmpty()){
            int n=q.poll();
            for(int it:adj.get(n)){
                if(!vis[it]){
                    q.offer(it);
                    vis[it]=true; 
                }   
            }
        }

    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<n; i++) adj.add(new ArrayList<>());
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        boolean[] vis=new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                bfs(i,source,destination,adj,vis);
            }
            if(vis[source]==true && vis[destination]==true) return true;
            if(vis[destination]==true) return false;
            if(vis[source]==true) return false;
        }
        return false;
    }
}
