// java

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int bfs(int r,int c,int[][] grid,int[][] vis){
        vis[r][c]=1;
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(r,c));
        int count=0;
        int n=grid.length;
        int m=grid[0].length;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        while(!q.isEmpty()){
            Pair p=q.poll();
            int row=p.first;
            int col=p.second;
            count++;
            for(int i=0; i<4; i++){
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && vis[nrow][ncol]==0){
                    q.offer(new Pair(nrow,ncol));
                    vis[nrow][ncol]=1;
                }
            }
        }

        return count;
    }

    public int maxAreaOfIsland(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        int max=0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1 && vis[i][j]==0){
                    int area=bfs(i,j,grid,vis);
                    max=Math.max(max,area);
                }
            }
        }
        return max;
    }
}
