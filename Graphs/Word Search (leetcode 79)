// java

class Solution {
    public boolean dfs(int r,int c,char[][] board,int idx,String word,boolean[][] vis){
        if(r>board.length || c>board[0].length) return false;
        if(idx==word.length()-1) return true;
        idx++;
        
        vis[r][c]=true;

        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};

        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<board.length && ncol>=0 && ncol<board[0].length && !vis[nrow][ncol] && word.charAt(idx)==board[nrow][ncol]){
                if(dfs(nrow,ncol,board,idx,word,vis)) return true;
            }
        }
        vis[r][c]=false;
        return false;
    }

    public boolean exist(char[][] board, String word) {
        int n=board.length;
        int m=board[0].length;
        boolean[][] vis=new boolean[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j]==word.charAt(0)){
                    int idx=0;
                    if(dfs(i,j,board,idx,word,vis)) return true;
                }
            }
        }

        return false;
    }
}
