// java

// DFS

class Solution {
    public void dfs(int r,int c,char[][] board){
        if(r<0 || r>=board.length || c<0 || c>=board[0].length || board[r][c]!='X') return;

        board[r][c]='.';
        dfs(r-1,c,board);
        dfs(r,c+1,board);
        dfs(r+1,c,board);
        dfs(r,c-1,board);
    }

    public int countBattleships(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        int cnt=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j]=='X'){
                    cnt++;
                    dfs(i,j,board);
                }
            }
        }
        return cnt;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// BFS

class Pair{
    int row;
    int col;
    Pair(int r,int c){
        this.row=r;
        this.col=c;
    }
}

class Solution {
    public void bfs(int row,int col,char[][] board,boolean[][] vis){
        vis[row][col]=true;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        int n=board.length;
        int m=board[0].length;
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(row,col));
        while(!q.isEmpty()){
            Pair p=q.poll();
            int r=p.row;
            int c=p.col;
            for(int i=0; i<4; i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && board[nrow][ncol]=='X'){
                    q.offer(new Pair(nrow,ncol));
                    vis[nrow][ncol]=true;
                }
            }
        }
    }

    public int countBattleships(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        boolean vis[][]=new boolean[n][m];
        int cnt=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j]=='X' && !vis[i][j]){
                    cnt++;
                    bfs(i,j,board,vis);
                }
            }
        }
        return cnt;
    }
}

