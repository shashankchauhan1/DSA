// java

class DisjointSet{
    List<Integer> parent=new ArrayList<>();
    List<Integer> size=new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0; i<=n; i++){
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node){
        if(node==parent.get(node)) return node;
        int ulp=findUPar(parent.get(node));
        parent.set(node,ulp);
        return ulp;
    }

    public void unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);

        if(size.get(ulp_u) <= size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v, size.get(ulp_u) + size.get(ulp_v));
        }
        else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_v) + size.get(ulp_v));
        }
    }

}

class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        int n=accounts.size();
        DisjointSet ds=new DisjointSet(n);
        Map<String,Integer> map=new HashMap<>();

        for(int i=0; i<n; i++){
            for(int j=1; j<accounts.get(i).size(); j++){
                String mail=accounts.get(i).get(j);
                if(!map.containsKey(mail)){
                    map.put(mail,i);
                }
                else{
                    ds.unionBySize(i,map.get(mail));
                }
            }
        }

        List<List<String>> ans=new ArrayList<>();
        for(int i=0; i<n; i++) ans.add(new ArrayList<>());

        for(Map.Entry<String,Integer> mpp:map.entrySet()){
            String mail=mpp.getKey();
            int node=ds.findUPar(mpp.getValue()); 
            ans.get(node).add(mail);
        }

        List<List<String>> result=new ArrayList<>();
        for(int i=0; i<n; i++){
            if(ans.get(i).size()==0) continue;

            ArrayList<String> list=new ArrayList<>();
            list.add(accounts.get(i).get(0));
            Collections.sort(ans.get(i));
            for(String temp:ans.get(i)){
                list.add(temp);
            }
            result.add(list);
        }
        
        return result;
    }
}
