// java

class DisjointSet{
    // List<Integer> parent=new ArrayList<>();
    // List<Integer> size=new ArrayList<>();
    int[] parent;
    int[] size;

    public DisjointSet(int n){
        parent=new int[n+1];
        size=new int[n+1];
        for(int i=0; i<=n; i++){
            parent[i]=i;
            size[i]=1;
        }
    }

    public int findUPar(int node){
        if(node==parent[node]) return node;
        int ulp=findUPar(parent[node]);
        parent[node]=ulp;
        return ulp;
    }

    public void unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(size[ulp_u]<=size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v] = size[ulp_u] + size[ulp_v];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u] = size[ulp_u] + size[ulp_v];
        }
    }
}

class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int[] result=new int[2];
        int n=edges.length;
        DisjointSet ds=new DisjointSet(n);
        
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int ulp_u=ds.findUPar(u);
            int ulp_v=ds.findUPar(v);

            if(ulp_u==ulp_v){
                result[0]=u;
                result[1]=v;
            }
            else{
                ds.unionBySize(u,v);
            }
        }

        return result;
    }
}
