// java

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n=points.length;

        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0; i<n; i++) adj.add(new ArrayList<>());

// need to create adj matrix like this from i to n-1 -> every as i++
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int w=Math.abs(points[i][0]-points[j][0]) + 
                        Math.abs(points[i][1] - points[j][1]);
                adj.get(i).add(new Pair(j,w));
                adj.get(j).add(new Pair(i,w));
            }
        }

        int sum=0;
        boolean[] vis=new boolean[n];
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.second-b.second);
        q.offer(new Pair(0,0));
        
        while(!q.isEmpty()){
            Pair p=q.poll();
            int node=p.first;
            int dist=p.second;
            if(vis[node]) continue;
            vis[node]=true;
            sum+=dist;
            for(Pair neighbour:adj.get(node)){
                int v=neighbour.first;
                int w=neighbour.second;
                if(!vis[v]){
                    q.offer(new Pair(v,w));
                }
            }
        }

        return sum;
    }
}
