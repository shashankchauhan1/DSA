// java

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int minCost(int n, int[][] edges) {
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();

        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }

        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];

            adj.get(u).add(new Pair(v,w));
            adj.get(v).add(new Pair(u,2*w));
        }

        int[] dist=new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[0]=0;
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.second-b.second);
        q.offer(new Pair(0,0));

        while(!q.isEmpty()){
            Pair p=q.poll();
            int node=p.first;
            int w=p.second;

            if(node==n-1) return w;

            for(Pair neighbour:adj.get(node)){
                int v=neighbour.first;
                int dofv=neighbour.second;
                if(w+dofv < dist[v]){
                    dist[v]=dofv+w;
                    q.offer(new Pair(v,dist[v]));
                }
            }
        }

        return -1;
    }
}
