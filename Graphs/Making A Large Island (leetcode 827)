// java

class DisjointSet{
    int[] parent;
    int[] size;
    
    public DisjointSet(int n){
        this.parent=new int[n];
        this.size=new int[n];
        for(int i=0; i<n; i++){
            parent[i]=i;
            size[i]=1;
        }
    }

    public int findUPar(int node){
        if(node==parent[node]) return node;
        int ulp=findUPar(parent[node]);
        parent[node]=ulp;
        return ulp;
    }

    public void unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);

        if(ulp_u==ulp_v) return;

        if(size[ulp_u] <= size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] = size[ulp_v] + size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] = size[ulp_v] + size[ulp_u];
        }
    }

}

class Solution {
    public int largestIsland(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;

        DisjointSet ds=new DisjointSet(n*n);

        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};

        for(int r=0; r<n; r++){
            for(int c=0; c<m; c++){
                if(grid[r][c]==0) continue;
                for(int i=0; i<4; i++){
                    int nrow=r+delrow[i];
                    int ncol=c+delcol[i];
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1){
                        int node=r*n+c;
                        int adjNode=nrow*n+ncol;
                        ds.unionBySize(node,adjNode);
                    }
                }
            }
        }

        // convert 0 -> 1

        int max=-1;
        for(int r=0; r<n; r++){
            for(int c=0; c<m; c++){
                if(grid[r][c]==1) continue;
                HashSet<Integer> set=new HashSet<>();
                for(int i=0; i<4; i++){
                    int nrow=r+delrow[i];
                    int ncol=c+delcol[i];
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1){
                        int node=nrow*n+ncol;
                        set.add(ds.findUPar(node));
                    }
                }
                int sum=1;
                for(int num:set){
                    sum+=ds.size[num];
                }
                max=Math.max(max,sum);
            }
        }

        for(int k=0; k<n*n; k++){
            max=Math.max(max,ds.size[ds.findUPar(k)]);
        }
        return max;
    }
}
