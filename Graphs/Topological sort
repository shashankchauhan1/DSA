// java (GEEKS FOR GEEKS)

class Solution {
    public static void dfs(int node,ArrayList<ArrayList<Integer>> adj,int[] vis,Stack<Integer> st){
        vis[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                dfs(it,adj,vis,st);
            }
        }
        st.push(node);
        
    }
    
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
        }
        Stack<Integer> st=new Stack<>();
        int[] vis=new int[V];
        
        for(int i=0; i<V; i++){
            if(vis[i]==0){
                dfs(i,adj,vis,st);
            }
        }
        
        
        ArrayList<Integer> list=new ArrayList<>();
        while(!st.isEmpty()){
            list.add(st.pop());
        }
        return list;
    }
}

