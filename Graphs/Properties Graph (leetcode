// java

class Solution {
    public int intersect(int[] a,int[] b){
        Set<Integer> st1=new HashSet<>();
        Set<Integer> st2=new HashSet<>();

        for(int num:a) st1.add(num);
        for(int num:b) st2.add(num);

        int cnt=0;
        for(int num:st1){
            if(st2.contains(num)) cnt++;
        }
        return cnt;
    }
    
    public void dfs(int node,boolean[] vis,ArrayList<ArrayList<Integer>> adj){
        vis[node]=true;
        for(int it:adj.get(node)){
            if(!vis[it]){
                dfs(it,vis,adj);
            }
        }
    }

    public int numberOfComponents(int[][] properties, int k) {
        int n=properties.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<n; i++) adj.add(new ArrayList<>());

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(intersect(properties[i],properties[j]) >=k ){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        boolean[] vis=new boolean[n];
        int count=0;
        for(int i=0; i<n; i++){
            if(!vis[i]){
                dfs(i,vis,adj);
                count++;
            }
        }

        return count;
    }
}
