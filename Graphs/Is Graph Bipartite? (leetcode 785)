// java

// BFS

class Solution {
    public boolean bfs(int n,int[][] graph,int[] color){
        color[n]=0;
        Queue<Integer> q=new LinkedList<>();
        q.offer(n);
        while(!q.isEmpty()){
            int node=q.poll();
            for(int it:graph[node]){
                if(color[it]==-1){
                    color[it]=1-color[node];
                    q.offer(it);
                }
                else if(color[it]==color[node]) return false;
            }
        }
        return true;
    }

    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int[] color=new int[n];
        Arrays.fill(color,-1);
        
        for(int i=0; i<n; i++){
            if(color[i]==-1){
                if(bfs(i,graph,color)==false) return false;
            }
        }
        return true;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

