// java (GEEKS FOR GEEKS)


class Solution {
    public boolean dfs(int node,int[] vis,int[] pathvis,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        pathvis[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(dfs(it,vis,pathvis,adj)) return true;
            }
            else if(pathvis[it]==1) return true;
        }
        
        pathvis[node]=0;
        return false;
    }
    
    public boolean isCyclic(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0; i<V; i++) adj.add(new ArrayList<>());
        
        for(int[] edge:edges){
            adj.get(edge[0]).add(edge[1]);
        }
        
        int[] vis=new int[V];
        int[] pathvis=new int[V];
        
        for(int i=0; i<V; i++){
            if(vis[i]==0){
                if(dfs(i,vis,pathvis,adj)) return true;
            }
        }
        return false;
    }
}
