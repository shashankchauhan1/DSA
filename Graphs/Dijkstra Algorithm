// java


class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0; i<V; i++) adj.add(new ArrayList<Pair>());
        
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            adj.get(u).add(new Pair(v,w));
            adj.get(v).add(new Pair(u,w));
        }
        int[] dist=new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src]=0;
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.second-b.second);
        q.offer(new Pair(src,0));
        
        while(!q.isEmpty()){
            Pair p=q.poll();
            int u=p.first;
            int w=p.second;
            for(Pair neighbour:adj.get(u)){
                int v=neighbour.first;
                int wofv=neighbour.second;
                if(dist[u]+wofv<dist[v]){
                    dist[v]=dist[u]+wofv;
                    q.offer(new Pair(v,dist[v]));
                }
            }
        }
        return dist;
    }
}


