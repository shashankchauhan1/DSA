// java

// Prims Algorithm

class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}

class Solution {
    public int spanningTree(int V, int[][] edges) {
        
        boolean[] vis=new boolean[V];
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0; i<V; i++) adj.add(new ArrayList<>());
        
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            adj.get(u).add(new Pair(v,w));
            adj.get(v).add(new Pair(u,w));
        }
        
        int sum=0;
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b) -> a.second-b.second);
        q.offer(new Pair(0,0));
        while(!q.isEmpty()){
            Pair p=q.poll();
            int node=p.first;
            int w=p.second;
            if(vis[node]==true) continue;
            vis[node]=true;
            sum+=w;
            for(Pair neighbour:adj.get(node)){
                int v=neighbour.first;
                int wofv=neighbour.second;
                if(!vis[v]){
                    q.offer(new Pair(v,wofv));
                }
            }
        }
        return sum;
    }
}

------------------------------------------------------------------------------------------------------------------------

// Kruskal's Algorithm

class DisjointSet{
    int[] parent;
    int[] size;
    
    DisjointSet(int n){
        this.parent = new int[n];
        this.size = new int[n];

        for(int i=0; i<n; i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    
    public int findUPar(int node){
        if(parent[node]==node) return node;
        int ulp=findUPar(parent[node]);
        parent[node]=ulp;
        return ulp;
    }
    
    public void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        
        if(ulp_u == ulp_v) return;
        
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] = size[ulp_u] + size[ulp_v];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] = size[ulp_v] + size[ulp_u];
        }
    }
    
}

class Solution {
    public int spanningTree(int V, int[][] edges) {
        Arrays.sort(edges,(a,b) -> a[2]-b[2]);
        int sum=0;
        
        DisjointSet ds=new DisjointSet(V);
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            if(ds.findUPar(u) != ds.findUPar(v)){
                sum+=w;
                ds.unionBySize(u,v);
            }
        }
        return sum;
    }
}
