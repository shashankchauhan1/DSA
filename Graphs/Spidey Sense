// Geeks For Geeks 


class Tuple{
    int first;
    int second;
    int third;
    Tuple(int f,int s,int th){
        this.first=f;
        this.second=s;
        this.third=th;
    }
}

class Solution {
    public static int[][] findDistance(char mat[][], int ll, int il) {
        int n=mat.length;
        int m=mat[0].length;
        int[][] vis=new int[n][m];
        int[][] dist=new int[n][m];
        
        Queue<Tuple> q=new LinkedList<>();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(mat[i][j]=='B'){
                    vis[i][j]=1;
                    q.offer(new Tuple(i,j,0));
                }
            }
        }
        
        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};
        
        while(!q.isEmpty()){
            Tuple p=q.poll();
            int r=p.first;
            int c=p.second;
            int s=p.third;
            
            dist[r][c]=s;
            
            for(int i=0; i<4; i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    if(vis[nrow][ncol]==0 && mat[nrow][ncol]=='O'){
                        vis[nrow][ncol]=1;
                        q.offer(new Tuple(nrow,ncol,s+1));
                    }
                    else if(vis[nrow][ncol]==0 && mat[nrow][ncol]=='W'){
                        vis[nrow][ncol]=1;
                        dist[nrow][ncol]=-1;
                    }
                }
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(vis[i][j]==0) dist[i][j]=-1;
            }
        }
        
        return dist;
    }
}
