// java

class Solution {
    public void dfs(int r,int c,int[][] vis,int[][] grid,int[] sum){
        vis[r][c]=1;
        sum[0]+=grid[r][c];

        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
        for(int i=0; i<4; i++){
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            if(nrow>=0 && nrow<grid.length && ncol>=0 && ncol<grid[0].length && vis[nrow][ncol]==0 && grid[nrow][ncol]!=0){
                dfs(nrow,ncol,vis,grid,sum);
            }
        }

    }

    public int countIslands(int[][] grid, int k) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        int count=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(vis[i][j]==0 && grid[i][j]!=0){
                    int[] sum=new int[1];
                    dfs(i,j,vis,grid,sum);
                    if(sum[0]%k==0) count++;
                }
            }
        }

        return count;
    }
}
