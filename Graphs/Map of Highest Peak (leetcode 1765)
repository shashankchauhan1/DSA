// java

class Tuple{
    int row;
    int col;
    int dist;
    Tuple(int r,int c,int d){
        this.row=r;
        this.col=c;
        this.dist=d;
    }
}

class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int n=isWater.length;
        int m=isWater[0].length;
        int[][] vis=new int[n][m];
        int[][] dist=new int[n][m];

        Queue<Tuple> q=new LinkedList<>();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(isWater[i][j]==1){
                    vis[i][j]=1;
                    q.offer(new Tuple(i,j,0));
                }
            }
        }

        int[] delrow={0,1,0,-1};
        int[] delcol={-1,0,1,0};
        while(!q.isEmpty()){
            Tuple t=q.poll();
            int r=t.row;
            int c=t.col;
            int d=t.dist;
            dist[r][c]=d;
            for(int i=0; i<4; i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && isWater[nrow][ncol]==0){
                    vis[nrow][ncol]=1;
                    q.offer(new Tuple(nrow,ncol,d+1));
                }
            }
        }
        return dist;
    }
}
