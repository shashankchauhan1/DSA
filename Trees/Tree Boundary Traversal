// java

class Solution {
    boolean isLeaf(Node node){
        return node.left==null && node.right==null;
    }
    
    void leftTraversal(Node node,ArrayList<Integer> list){
        Node curr=node.left;
        while(curr!=null){
            if(!isLeaf(curr)){
                list.add(curr.data);
            }
            if(curr.left!=null){
                curr=curr.left;
            }
            else curr=curr.right;
        }
    }
    
    void leafTraversal(Node node,ArrayList<Integer> list){
        if(node==null) return;
        if(isLeaf(node)) list.add(node.data);
        leafTraversal(node.left,list);
        leafTraversal(node.right,list);
    }
    
    void rightTraversal(Node node,ArrayList<Integer> list){
        Node curr=node.right;
        Stack<Integer> st=new Stack<>();
        while(curr!=null){
            if(!isLeaf(curr)){
                st.add(curr.data);
            }
            if(curr.right!=null){
                curr=curr.right;
            }
            else curr=curr.left;
        }
        while(!st.isEmpty()) list.add(st.pop());
    }
    
    ArrayList<Integer> boundaryTraversal(Node node) {
        ArrayList<Integer> list=new ArrayList<>();
        if(node==null) return list;
        
        if(!isLeaf(node)) list.add(node.data);
        
        leftTraversal(node,list);
        leafTraversal(node,list);
        rightTraversal(node,list);
        
        return list;
    }
}
