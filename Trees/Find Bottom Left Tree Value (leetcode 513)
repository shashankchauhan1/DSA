// java


1> DFS


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void f(TreeNode root,int[] ans,int level){
        if(root==null) return;
        if(ans[0]<level){
            ans[0]=level;
            ans[1]=root.val;
        }

        f(root.left,ans,level+1);
        f(root.right,ans,level+1);
    }

    public int findBottomLeftValue(TreeNode root) {
        if(root.left==null && root.right==null) return root.val;
        int[] ans=new int[2];
        f(root,ans,0);
        return ans[1];
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------


2> BFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        int ans=0;
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            ArrayList<Integer> list=new ArrayList<>();
            for(int i=0; i<size; i++){
                if(q.peek().left!=null) q.offer(q.peek().left);
                if(q.peek().right!=null) q.offer(q.peek().right);
                list.add(q.poll().val);
            }
            ans=list.get(0);
        }
        return ans;
    }
}
