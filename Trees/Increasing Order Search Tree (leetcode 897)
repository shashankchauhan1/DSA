// java

// store the inorder traversal of the tree in list.
// construct new Tree by this inorder list, left=null, right=func(i+1,list);


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void inorder(TreeNode root,ArrayList<Integer> list){
        if(root==null) return;
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }

    public TreeNode construct(int i,ArrayList<Integer> list){
        if(i==list.size()) return null;
        TreeNode root=new TreeNode(list.get(i));
        root.left=null;
        root.right=construct(i+1,list);
        return root;
    }

    public TreeNode increasingBST(TreeNode root) {
        if(root==null) return null;
        ArrayList<Integer> list=new ArrayList<>();
        inorder(root,list);
        return construct(0,list);
    }
}
