// java

// find the node first then check for its children if it has no children then return, if has 1 child then return that one, if has both of childs,
// then find the inorder succesor and swap the values then call again to delete that swapped value node

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return null;

        if(root.val > key) root.left=deleteNode(root.left,key);
        else if(root.val < key) root.right=deleteNode(root.right,key);
        else{
            if(root.left==null) return root.right;
            else if(root.right==null) return root.left;
            else{
                root.val=find(root.right);
                root.right=deleteNode(root.right,root.val);
            }
        }

        return root;
    }

    public int find(TreeNode node){
        while(node.left!=null) node=node.left;
        return node.val;
    }
}
