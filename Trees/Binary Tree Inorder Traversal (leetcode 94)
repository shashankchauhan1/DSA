// java

1> Iterative Approach

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void inOrder(List<Integer> list,TreeNode root){
        if(root==null) return;
        Stack<TreeNode> st=new Stack<>();
        TreeNode node=root;
        while(true){
            if(node!=null){
                st.push(node);
                node=node.left;
            }
            else{
                if(st.isEmpty()) break;
                node=st.pop();
                list.add(node.val);
                node=node.right;
            }
        }
    }

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        inOrder(result,root);
        return result;
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------


2> Recursive Approach


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void inOrder(ArrayList<Integer> list,TreeNode node){
        if(node==null) return;

        inOrder(list,node.left);
        list.add(node.val);
        inOrder(list,node.right);
    }

    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result=new ArrayList<>();
        inOrder(result,root);
        return result;
    }
}



-----------------------------------------------------------------------------------------------------------------------------------------


3> Morris Traversal : it works in O(1) space complexity if we are just printing the values, the solution below is is use a list to store the data so SC will O(n).



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans=new ArrayList<>();
        if(root==null) return ans;
        while(root!=null){
            if(root.left==null){
                ans.add(root.val);
                root=root.right;
            }
            else{
                TreeNode curr=root.left;
                while(curr.right!=null && curr.right!=root){
                    curr=curr.right;
                }
                if(curr.right==null){
                    curr.right=root;
                    root=root.left;
                }
                else{
                    curr.right=null;
                    ans.add(root.val);
                    root=root.right;
                }
            }
        }
        return ans;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4> C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void inorder(TreeNode* root,vector<int>& list){
        if(root==NULL) return;
        inorder(root->left,list);
        list.push_back(root->val);
        inorder(root->right,list);
    }

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        inorder(root,result);
        return result;
    }
};
