// java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class BSTIterator{
        Stack<TreeNode> st=new Stack<>();
        boolean rev;

        public BSTIterator(TreeNode root,boolean value){
            rev = value;
            pushAll(root);
        }

        public int next(){
            TreeNode node = st.pop();
            if(rev) pushAll(node.right);
            else pushAll(node.left);
            return node.val;
        }

        public void pushAll(TreeNode node){
            while(node != null){
                st.push(node);
                if(rev) node = node.left;
                else node = node.right;
            }
        }
    }

    public boolean findTarget(TreeNode root, int k) {
        if(root==null) return false;
        BSTIterator i1=new BSTIterator(root,true);
        BSTIterator i2=new BSTIterator(root,false);

        int i = i1.next();
        int j = i2.next();

        while(i < j){
            if( i + j == k) return true;
            else if( i + j > k ) j = i2.next();
            else i = i1.next();
        }

        return false;
    }
}
