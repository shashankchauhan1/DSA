// java

1> Approach one

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null) return new TreeNode(val);
        TreeNode curr=root;
        while(curr!=null){
            if(curr.val<val){
                if(curr.right!=null) curr=curr.right;
                else{
                    curr.right=new TreeNode(val);
                    break;
                }
            }
            else{
                if(curr.left!=null) curr=curr.left;
                else{
                    curr.left=new TreeNode(val);
                    break;
                }
            }
        }
        return root;
    }

    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root=null;
        for(int i=0; i<preorder.length; i++){
            root=insertIntoBST(root,preorder[i]);
        }
        return root;
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2> Approach two (create a duplicate array of preorder but in sorted order so it will be the inorder and then make the tree from inorder and preorder)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

 public TreeNode convert(int[] preorder,int prelow,int prehigh,int[] inorder,int inlow,int inhigh){
        if(prelow>prehigh) return null;
        TreeNode root=new TreeNode(preorder[prelow]);
        int i=inlow;
        while(inorder[i]!=preorder[prelow]) i++;
        int leftSize=i-inlow;

        root.left=convert(preorder,prelow+1,prelow+leftSize,inorder,inlow,i-1);
        root.right=convert(preorder,prelow+leftSize+1,prehigh,inorder,i+1,inhigh);
        return root;
    }

    public TreeNode bstFromPreorder(int[] preorder) {
        int[] inorder=new int[preorder.length];
        for(int i=0; i<preorder.length; i++){
            inorder[i]=preorder[i];
        }
        Arrays.sort(inorder);

        int n=preorder.length;
        return convert(preorder,0,n-1,inorder,0,n-1);

    }
}
