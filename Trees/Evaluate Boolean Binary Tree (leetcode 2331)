// java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean evaluateTree(TreeNode root) {
        if(root.left==null || root.right==null) return root.val==1;

        boolean lh=evaluateTree(root.left);
        boolean rh=evaluateTree(root.right);

        if(root.val==3) return lh && rh;
        else return lh || rh;
        
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void f(TreeNode root){
        if(root.left==null && root.right==null) return;

        f(root.left);
        f(root.right);

        if(root.val==3){
            root.val= (root.left.val==1 || root.right.val==1) ? 1 : 0;
        }
        else if(root.val==2){
            root.val= (root.left.val==1 && root.right.val==1) ? 1 : 0;
        }
        
    }

    public boolean evaluateTree(TreeNode root) {
        f(root);
        return root.val==1;
    }
}
