// java

// expand around each character

class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<=1) return s;
        String LPS="";
        for(int i=1; i<s.length(); i++){
            int low=i;
            int high=i;

            while(s.charAt(low)==s.charAt(high)){
                low--;
                high++;
                if(low==-1 || high==s.length()) break;
            }

            String palindrome=s.substring(low+1,high);
            if(palindrome.length()>LPS.length()) LPS=palindrome;

            low=i-1;
            high=i;

            while(s.charAt(low)==s.charAt(high)){
                low--;
                high++;
                if(low==-1 || high==s.length()) break;
            }

            palindrome=s.substring(low+1,high);
            if(palindrome.length()>LPS.length()) LPS=palindrome;
        }
        return LPS;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------

// Brute force approach (O^3)

class Solution {

    public boolean isPalindromic(String pl){
        int i=0;
        int j=pl.length()-1;
        while(i<j){
            if(pl.charAt(i)!=pl.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    public String longestPalindrome(String s) {
        int max=Integer.MIN_VALUE;
        String maxStr="";
        for(int i=0; i<s.length(); i++){
            for(int j=i; j<s.length(); j++){
                String pl=s.substring(i,j+1);
                if(isPalindromic(pl)){
                    // max=Math.max(max,pl.length());
                    if(pl.length()>max){
                        max=pl.length();
                        maxStr=pl;
                    }
                }
            }
        }
        return maxStr; 
    }
}
